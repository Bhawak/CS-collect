// Generated by view binder compiler. Do not edit!
package org.odk.collect.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.odk.collect.android.R;

public final class SubmissionSummaryLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView info;

  @NonNull
  public final Chip openFormChip;

  @NonNull
  public final ImageButton statusIcon;

  @NonNull
  public final TextView statusText;

  @NonNull
  public final TextView submissionName;

  private SubmissionSummaryLayoutBinding(@NonNull LinearLayout rootView, @NonNull TextView info,
      @NonNull Chip openFormChip, @NonNull ImageButton statusIcon, @NonNull TextView statusText,
      @NonNull TextView submissionName) {
    this.rootView = rootView;
    this.info = info;
    this.openFormChip = openFormChip;
    this.statusIcon = statusIcon;
    this.statusText = statusText;
    this.submissionName = submissionName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SubmissionSummaryLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SubmissionSummaryLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.submission_summary_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SubmissionSummaryLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.info;
      TextView info = rootView.findViewById(id);
      if (info == null) {
        break missingId;
      }

      id = R.id.openFormChip;
      Chip openFormChip = rootView.findViewById(id);
      if (openFormChip == null) {
        break missingId;
      }

      id = R.id.status_icon;
      ImageButton statusIcon = rootView.findViewById(id);
      if (statusIcon == null) {
        break missingId;
      }

      id = R.id.status_text;
      TextView statusText = rootView.findViewById(id);
      if (statusText == null) {
        break missingId;
      }

      id = R.id.submission_name;
      TextView submissionName = rootView.findViewById(id);
      if (submissionName == null) {
        break missingId;
      }

      return new SubmissionSummaryLayoutBinding((LinearLayout) rootView, info, openFormChip,
          statusIcon, statusText, submissionName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
