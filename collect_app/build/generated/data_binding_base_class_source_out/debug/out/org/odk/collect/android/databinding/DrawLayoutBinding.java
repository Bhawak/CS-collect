// Generated by view binder compiler. Do not edit!
package org.odk.collect.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.odk.collect.android.R;
import org.odk.collect.android.views.DrawView;

public final class DrawLayoutBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final CardView cvClear;

  @NonNull
  public final CardView cvSaveAndClose;

  @NonNull
  public final CardView cvSetColor;

  @NonNull
  public final DrawView drawView;

  @NonNull
  public final FloatingActionButton fabActions;

  @NonNull
  public final FloatingActionButton fabClear;

  @NonNull
  public final FloatingActionButton fabSaveAndClose;

  @NonNull
  public final FloatingActionButton fabSetColor;

  private DrawLayoutBinding(@NonNull CoordinatorLayout rootView, @NonNull CardView cvClear,
      @NonNull CardView cvSaveAndClose, @NonNull CardView cvSetColor, @NonNull DrawView drawView,
      @NonNull FloatingActionButton fabActions, @NonNull FloatingActionButton fabClear,
      @NonNull FloatingActionButton fabSaveAndClose, @NonNull FloatingActionButton fabSetColor) {
    this.rootView = rootView;
    this.cvClear = cvClear;
    this.cvSaveAndClose = cvSaveAndClose;
    this.cvSetColor = cvSetColor;
    this.drawView = drawView;
    this.fabActions = fabActions;
    this.fabClear = fabClear;
    this.fabSaveAndClose = fabSaveAndClose;
    this.fabSetColor = fabSetColor;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DrawLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DrawLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.draw_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DrawLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cv_clear;
      CardView cvClear = rootView.findViewById(id);
      if (cvClear == null) {
        break missingId;
      }

      id = R.id.cv_save_and_close;
      CardView cvSaveAndClose = rootView.findViewById(id);
      if (cvSaveAndClose == null) {
        break missingId;
      }

      id = R.id.cv_set_color;
      CardView cvSetColor = rootView.findViewById(id);
      if (cvSetColor == null) {
        break missingId;
      }

      id = R.id.drawView;
      DrawView drawView = rootView.findViewById(id);
      if (drawView == null) {
        break missingId;
      }

      id = R.id.fab_actions;
      FloatingActionButton fabActions = rootView.findViewById(id);
      if (fabActions == null) {
        break missingId;
      }

      id = R.id.fab_clear;
      FloatingActionButton fabClear = rootView.findViewById(id);
      if (fabClear == null) {
        break missingId;
      }

      id = R.id.fab_save_and_close;
      FloatingActionButton fabSaveAndClose = rootView.findViewById(id);
      if (fabSaveAndClose == null) {
        break missingId;
      }

      id = R.id.fab_set_color;
      FloatingActionButton fabSetColor = rootView.findViewById(id);
      if (fabSetColor == null) {
        break missingId;
      }

      return new DrawLayoutBinding((CoordinatorLayout) rootView, cvClear, cvSaveAndClose,
          cvSetColor, drawView, fabActions, fabClear, fabSaveAndClose, fabSetColor);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
