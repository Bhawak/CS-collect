// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.odk.collect.android.projects.CurrentProjectProvider;
import org.odk.collect.android.storage.StoragePathProvider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDependencyModule_ProvidesStoragePathProviderFactory implements Factory<StoragePathProvider> {
  private final AppDependencyModule module;

  private final Provider<Context> contextProvider;

  private final Provider<CurrentProjectProvider> currentProjectProvider;

  public AppDependencyModule_ProvidesStoragePathProviderFactory(AppDependencyModule module,
      Provider<Context> contextProvider, Provider<CurrentProjectProvider> currentProjectProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.currentProjectProvider = currentProjectProvider;
  }

  @Override
  public StoragePathProvider get() {
    return providesStoragePathProvider(module, contextProvider.get(), currentProjectProvider.get());
  }

  public static AppDependencyModule_ProvidesStoragePathProviderFactory create(
      AppDependencyModule module, Provider<Context> contextProvider,
      Provider<CurrentProjectProvider> currentProjectProvider) {
    return new AppDependencyModule_ProvidesStoragePathProviderFactory(module, contextProvider, currentProjectProvider);
  }

  public static StoragePathProvider providesStoragePathProvider(AppDependencyModule instance,
      Context context, CurrentProjectProvider currentProjectProvider) {
    return Preconditions.checkNotNullFromProvides(instance.providesStoragePathProvider(context, currentProjectProvider));
  }
}
