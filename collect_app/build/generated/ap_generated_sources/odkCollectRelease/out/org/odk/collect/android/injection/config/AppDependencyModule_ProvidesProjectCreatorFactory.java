// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.odk.collect.android.configure.SettingsImporter;
import org.odk.collect.android.projects.CurrentProjectProvider;
import org.odk.collect.android.projects.ProjectCreator;
import org.odk.collect.android.projects.ProjectImporter;
import org.odk.collect.android.storage.StoragePathProvider;
import org.odk.collect.projects.ProjectsRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDependencyModule_ProvidesProjectCreatorFactory implements Factory<ProjectCreator> {
  private final AppDependencyModule module;

  private final Provider<ProjectImporter> projectImporterProvider;

  private final Provider<ProjectsRepository> projectsRepositoryProvider;

  private final Provider<CurrentProjectProvider> currentProjectProvider;

  private final Provider<SettingsImporter> settingsImporterProvider;

  private final Provider<Context> contextProvider;

  private final Provider<StoragePathProvider> storagePathProvider;

  public AppDependencyModule_ProvidesProjectCreatorFactory(AppDependencyModule module,
      Provider<ProjectImporter> projectImporterProvider,
      Provider<ProjectsRepository> projectsRepositoryProvider,
      Provider<CurrentProjectProvider> currentProjectProvider,
      Provider<SettingsImporter> settingsImporterProvider, Provider<Context> contextProvider,
      Provider<StoragePathProvider> storagePathProvider) {
    this.module = module;
    this.projectImporterProvider = projectImporterProvider;
    this.projectsRepositoryProvider = projectsRepositoryProvider;
    this.currentProjectProvider = currentProjectProvider;
    this.settingsImporterProvider = settingsImporterProvider;
    this.contextProvider = contextProvider;
    this.storagePathProvider = storagePathProvider;
  }

  @Override
  public ProjectCreator get() {
    return providesProjectCreator(module, projectImporterProvider.get(), projectsRepositoryProvider.get(), currentProjectProvider.get(), settingsImporterProvider.get(), contextProvider.get(), storagePathProvider.get());
  }

  public static AppDependencyModule_ProvidesProjectCreatorFactory create(AppDependencyModule module,
      Provider<ProjectImporter> projectImporterProvider,
      Provider<ProjectsRepository> projectsRepositoryProvider,
      Provider<CurrentProjectProvider> currentProjectProvider,
      Provider<SettingsImporter> settingsImporterProvider, Provider<Context> contextProvider,
      Provider<StoragePathProvider> storagePathProvider) {
    return new AppDependencyModule_ProvidesProjectCreatorFactory(module, projectImporterProvider, projectsRepositoryProvider, currentProjectProvider, settingsImporterProvider, contextProvider, storagePathProvider);
  }

  public static ProjectCreator providesProjectCreator(AppDependencyModule instance,
      ProjectImporter projectImporter, ProjectsRepository projectsRepository,
      CurrentProjectProvider currentProjectProvider, SettingsImporter settingsImporter,
      Context context, StoragePathProvider storagePathProvider) {
    return Preconditions.checkNotNullFromProvides(instance.providesProjectCreator(projectImporter, projectsRepository, currentProjectProvider, settingsImporter, context, storagePathProvider));
  }
}
