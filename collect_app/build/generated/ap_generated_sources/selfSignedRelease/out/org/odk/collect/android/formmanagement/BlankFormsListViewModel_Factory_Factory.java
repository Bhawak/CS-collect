// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.formmanagement;

import android.app.Application;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import org.odk.collect.analytics.Analytics;
import org.odk.collect.android.formmanagement.matchexactly.SyncStatusAppState;
import org.odk.collect.android.preferences.source.SettingsProvider;
import org.odk.collect.android.projects.CurrentProjectProvider;
import org.odk.collect.android.utilities.FormsRepositoryProvider;
import org.odk.collect.async.Scheduler;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BlankFormsListViewModel_Factory_Factory implements Factory<BlankFormsListViewModel.Factory> {
  private final Provider<Application> applicationProvider;

  private final Provider<Scheduler> schedulerProvider;

  private final Provider<SyncStatusAppState> syncRepositoryProvider;

  private final Provider<SettingsProvider> settingsProvider;

  private final Provider<Analytics> analyticsProvider;

  private final Provider<FormsUpdater> formsUpdaterProvider;

  private final Provider<CurrentProjectProvider> currentProjectProvider;

  private final Provider<FormsRepositoryProvider> formsRepositoryProvider;

  public BlankFormsListViewModel_Factory_Factory(Provider<Application> applicationProvider,
      Provider<Scheduler> schedulerProvider, Provider<SyncStatusAppState> syncRepositoryProvider,
      Provider<SettingsProvider> settingsProvider, Provider<Analytics> analyticsProvider,
      Provider<FormsUpdater> formsUpdaterProvider,
      Provider<CurrentProjectProvider> currentProjectProvider,
      Provider<FormsRepositoryProvider> formsRepositoryProvider) {
    this.applicationProvider = applicationProvider;
    this.schedulerProvider = schedulerProvider;
    this.syncRepositoryProvider = syncRepositoryProvider;
    this.settingsProvider = settingsProvider;
    this.analyticsProvider = analyticsProvider;
    this.formsUpdaterProvider = formsUpdaterProvider;
    this.currentProjectProvider = currentProjectProvider;
    this.formsRepositoryProvider = formsRepositoryProvider;
  }

  @Override
  public BlankFormsListViewModel.Factory get() {
    return newInstance(applicationProvider.get(), schedulerProvider.get(), syncRepositoryProvider.get(), settingsProvider.get(), analyticsProvider.get(), formsUpdaterProvider.get(), currentProjectProvider.get(), formsRepositoryProvider.get());
  }

  public static BlankFormsListViewModel_Factory_Factory create(
      Provider<Application> applicationProvider, Provider<Scheduler> schedulerProvider,
      Provider<SyncStatusAppState> syncRepositoryProvider,
      Provider<SettingsProvider> settingsProvider, Provider<Analytics> analyticsProvider,
      Provider<FormsUpdater> formsUpdaterProvider,
      Provider<CurrentProjectProvider> currentProjectProvider,
      Provider<FormsRepositoryProvider> formsRepositoryProvider) {
    return new BlankFormsListViewModel_Factory_Factory(applicationProvider, schedulerProvider, syncRepositoryProvider, settingsProvider, analyticsProvider, formsUpdaterProvider, currentProjectProvider, formsRepositoryProvider);
  }

  public static BlankFormsListViewModel.Factory newInstance(Application application,
      Scheduler scheduler, SyncStatusAppState syncRepository, SettingsProvider settingsProvider,
      Analytics analytics, FormsUpdater formsUpdater, CurrentProjectProvider currentProjectProvider,
      FormsRepositoryProvider formsRepositoryProvider) {
    return new BlankFormsListViewModel.Factory(application, scheduler, syncRepository, settingsProvider, analytics, formsUpdater, currentProjectProvider, formsRepositoryProvider);
  }
}
