// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import android.app.Application;
import android.content.Context;
import android.webkit.MimeTypeMap;
import androidx.work.WorkManager;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.javarosa.core.reference.ReferenceManager;
import org.odk.collect.analytics.Analytics;
import org.odk.collect.android.activities.CollectAbstractActivity;
import org.odk.collect.android.activities.CollectAbstractActivity_MembersInjector;
import org.odk.collect.android.activities.DeleteSavedFormActivity;
import org.odk.collect.android.activities.DeleteSavedFormActivity_MembersInjector;
import org.odk.collect.android.activities.FillBlankFormActivity;
import org.odk.collect.android.activities.FillBlankFormActivity_MembersInjector;
import org.odk.collect.android.activities.FirstLaunchActivity;
import org.odk.collect.android.activities.FirstLaunchActivity_MembersInjector;
import org.odk.collect.android.activities.FormDownloadListActivity;
import org.odk.collect.android.activities.FormDownloadListActivity_MembersInjector;
import org.odk.collect.android.activities.FormEntryActivity;
import org.odk.collect.android.activities.FormEntryActivity_MembersInjector;
import org.odk.collect.android.activities.FormHierarchyActivity;
import org.odk.collect.android.activities.FormHierarchyActivity_MembersInjector;
import org.odk.collect.android.activities.FormMapActivity;
import org.odk.collect.android.activities.FormMapActivity_MembersInjector;
import org.odk.collect.android.activities.GeoPointMapActivity;
import org.odk.collect.android.activities.GeoPointMapActivity_MembersInjector;
import org.odk.collect.android.activities.GeoPolyActivity;
import org.odk.collect.android.activities.GeoPolyActivity_MembersInjector;
import org.odk.collect.android.activities.InstanceChooserList;
import org.odk.collect.android.activities.InstanceChooserList_MembersInjector;
import org.odk.collect.android.activities.InstanceUploaderActivity;
import org.odk.collect.android.activities.InstanceUploaderActivity_MembersInjector;
import org.odk.collect.android.activities.InstanceUploaderListActivity;
import org.odk.collect.android.activities.InstanceUploaderListActivity_MembersInjector;
import org.odk.collect.android.activities.MainMenuActivity;
import org.odk.collect.android.activities.MainMenuActivity_MembersInjector;
import org.odk.collect.android.activities.SplashScreenActivity;
import org.odk.collect.android.activities.SplashScreenActivity_MembersInjector;
import org.odk.collect.android.activities.viewmodels.CurrentProjectViewModel;
import org.odk.collect.android.activities.viewmodels.MainMenuViewModel;
import org.odk.collect.android.activities.viewmodels.SplashScreenViewModel;
import org.odk.collect.android.adapters.InstanceUploaderAdapter;
import org.odk.collect.android.application.Collect;
import org.odk.collect.android.application.Collect_MembersInjector;
import org.odk.collect.android.application.initialization.AnalyticsInitializer;
import org.odk.collect.android.application.initialization.ApplicationInitializer;
import org.odk.collect.android.application.initialization.ExistingProjectMigrator;
import org.odk.collect.android.application.initialization.ExistingSettingsMigrator;
import org.odk.collect.android.application.initialization.FormUpdatesUpgrade;
import org.odk.collect.android.application.initialization.SettingsMigrator;
import org.odk.collect.android.application.initialization.upgrade.AppUpgrader;
import org.odk.collect.android.audio.AudioRecordingControllerFragment;
import org.odk.collect.android.audio.AudioRecordingControllerFragment_MembersInjector;
import org.odk.collect.android.audio.AudioRecordingErrorDialogFragment;
import org.odk.collect.android.audio.AudioRecordingErrorDialogFragment_MembersInjector;
import org.odk.collect.android.backgroundwork.AutoSendTaskSpec;
import org.odk.collect.android.backgroundwork.AutoSendTaskSpec_MembersInjector;
import org.odk.collect.android.backgroundwork.AutoUpdateTaskSpec;
import org.odk.collect.android.backgroundwork.AutoUpdateTaskSpec_MembersInjector;
import org.odk.collect.android.backgroundwork.FormUpdateScheduler;
import org.odk.collect.android.backgroundwork.InstanceSubmitScheduler;
import org.odk.collect.android.backgroundwork.SyncFormsTaskSpec;
import org.odk.collect.android.backgroundwork.SyncFormsTaskSpec_MembersInjector;
import org.odk.collect.android.configure.SettingsChangeHandler;
import org.odk.collect.android.configure.SettingsImporter;
import org.odk.collect.android.configure.qr.AppConfigurationGenerator;
import org.odk.collect.android.configure.qr.QRCodeGenerator;
import org.odk.collect.android.configure.qr.QRCodeScannerFragment;
import org.odk.collect.android.configure.qr.QRCodeScannerFragment_MembersInjector;
import org.odk.collect.android.configure.qr.QRCodeTabsActivity;
import org.odk.collect.android.configure.qr.QRCodeTabsActivity_MembersInjector;
import org.odk.collect.android.configure.qr.ShowQRCodeFragment;
import org.odk.collect.android.configure.qr.ShowQRCodeFragment_MembersInjector;
import org.odk.collect.android.events.RxEventBus;
import org.odk.collect.android.external.AndroidShortcutsActivity;
import org.odk.collect.android.external.AndroidShortcutsActivity_MembersInjector;
import org.odk.collect.android.external.FormUriActivity;
import org.odk.collect.android.external.FormUriActivity_MembersInjector;
import org.odk.collect.android.external.FormsProvider;
import org.odk.collect.android.external.FormsProvider_MembersInjector;
import org.odk.collect.android.external.InstanceProvider;
import org.odk.collect.android.external.InstanceProvider_MembersInjector;
import org.odk.collect.android.formentry.BackgroundAudioPermissionDialogFragment;
import org.odk.collect.android.formentry.BackgroundAudioPermissionDialogFragment_MembersInjector;
import org.odk.collect.android.formentry.BackgroundAudioViewModel;
import org.odk.collect.android.formentry.FormEntryViewModel;
import org.odk.collect.android.formentry.ODKView;
import org.odk.collect.android.formentry.ODKView_MembersInjector;
import org.odk.collect.android.formentry.QuitFormDialogFragment;
import org.odk.collect.android.formentry.QuitFormDialogFragment_MembersInjector;
import org.odk.collect.android.formentry.media.AudioHelperFactory;
import org.odk.collect.android.formentry.saving.FormSaveViewModel;
import org.odk.collect.android.formentry.saving.SaveAnswerFileErrorDialogFragment;
import org.odk.collect.android.formentry.saving.SaveAnswerFileErrorDialogFragment_MembersInjector;
import org.odk.collect.android.formentry.saving.SaveFormProgressDialogFragment;
import org.odk.collect.android.formentry.saving.SaveFormProgressDialogFragment_MembersInjector;
import org.odk.collect.android.formmanagement.BlankFormsListViewModel;
import org.odk.collect.android.formmanagement.FormDownloader;
import org.odk.collect.android.formmanagement.FormSourceProvider;
import org.odk.collect.android.formmanagement.FormsUpdater;
import org.odk.collect.android.formmanagement.InstancesAppState;
import org.odk.collect.android.formmanagement.ServerFormsDetailsFetcher;
import org.odk.collect.android.formmanagement.matchexactly.SyncStatusAppState;
import org.odk.collect.android.fragments.AppListFragment;
import org.odk.collect.android.fragments.AppListFragment_MembersInjector;
import org.odk.collect.android.fragments.BarCodeScannerFragment;
import org.odk.collect.android.fragments.BarCodeScannerFragment_MembersInjector;
import org.odk.collect.android.fragments.BlankFormListFragment;
import org.odk.collect.android.fragments.BlankFormListFragment_MembersInjector;
import org.odk.collect.android.fragments.MapBoxInitializationFragment;
import org.odk.collect.android.fragments.MapBoxInitializationFragment_MembersInjector;
import org.odk.collect.android.fragments.SavedFormListFragment;
import org.odk.collect.android.fragments.SavedFormListFragment_MembersInjector;
import org.odk.collect.android.fragments.dialogs.SelectMinimalDialog;
import org.odk.collect.android.fragments.dialogs.SelectMinimalDialog_MembersInjector;
import org.odk.collect.android.gdrive.GoogleAccountPicker;
import org.odk.collect.android.gdrive.GoogleAccountsManager;
import org.odk.collect.android.gdrive.GoogleApiProvider;
import org.odk.collect.android.gdrive.GoogleDriveActivity;
import org.odk.collect.android.gdrive.GoogleDriveActivity_MembersInjector;
import org.odk.collect.android.gdrive.GoogleSheetsUploaderActivity;
import org.odk.collect.android.gdrive.GoogleSheetsUploaderActivity_MembersInjector;
import org.odk.collect.android.geo.GoogleMapFragment;
import org.odk.collect.android.geo.GoogleMapFragment_MembersInjector;
import org.odk.collect.android.geo.MapProvider;
import org.odk.collect.android.geo.MapboxMapFragment;
import org.odk.collect.android.geo.MapboxMapFragment_MembersInjector;
import org.odk.collect.android.geo.OsmDroidMapFragment;
import org.odk.collect.android.geo.OsmDroidMapFragment_MembersInjector;
import org.odk.collect.android.instancemanagement.InstanceAutoSender;
import org.odk.collect.android.logic.PropertyManager;
import org.odk.collect.android.logic.PropertyManager_MembersInjector;
import org.odk.collect.android.metadata.InstallIDProvider;
import org.odk.collect.android.notifications.Notifier;
import org.odk.collect.android.openrosa.OpenRosaHttpInterface;
import org.odk.collect.android.permissions.PermissionsChecker;
import org.odk.collect.android.permissions.PermissionsProvider;
import org.odk.collect.android.preferences.CaptionedListPreference;
import org.odk.collect.android.preferences.CaptionedListPreference_MembersInjector;
import org.odk.collect.android.preferences.PreferenceVisibilityHandler;
import org.odk.collect.android.preferences.ProjectPreferencesViewModel;
import org.odk.collect.android.preferences.dialogs.AdminPasswordDialogFragment;
import org.odk.collect.android.preferences.dialogs.AdminPasswordDialogFragment_MembersInjector;
import org.odk.collect.android.preferences.dialogs.ChangeAdminPasswordDialog;
import org.odk.collect.android.preferences.dialogs.ChangeAdminPasswordDialog_MembersInjector;
import org.odk.collect.android.preferences.dialogs.ResetDialogPreferenceFragmentCompat;
import org.odk.collect.android.preferences.dialogs.ResetDialogPreferenceFragmentCompat_MembersInjector;
import org.odk.collect.android.preferences.dialogs.ServerAuthDialogFragment;
import org.odk.collect.android.preferences.dialogs.ServerAuthDialogFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.BaseAdminPreferencesFragment;
import org.odk.collect.android.preferences.screens.BaseAdminPreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.BasePreferencesFragment;
import org.odk.collect.android.preferences.screens.BasePreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.BaseProjectPreferencesFragment;
import org.odk.collect.android.preferences.screens.BaseProjectPreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.ExperimentalPreferencesFragment;
import org.odk.collect.android.preferences.screens.FormManagementPreferencesFragment;
import org.odk.collect.android.preferences.screens.FormManagementPreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.FormMetadataPreferencesFragment;
import org.odk.collect.android.preferences.screens.FormMetadataPreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.IdentityPreferencesFragment;
import org.odk.collect.android.preferences.screens.IdentityPreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.ProjectDisplayPreferencesFragment;
import org.odk.collect.android.preferences.screens.ProjectDisplayPreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.ProjectManagementPreferencesFragment;
import org.odk.collect.android.preferences.screens.ProjectManagementPreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.ProjectPreferencesActivity;
import org.odk.collect.android.preferences.screens.ProjectPreferencesActivity_MembersInjector;
import org.odk.collect.android.preferences.screens.ProjectPreferencesFragment;
import org.odk.collect.android.preferences.screens.ServerPreferencesFragment;
import org.odk.collect.android.preferences.screens.ServerPreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.screens.UserInterfacePreferencesFragment;
import org.odk.collect.android.preferences.screens.UserInterfacePreferencesFragment_MembersInjector;
import org.odk.collect.android.preferences.source.SettingsProvider;
import org.odk.collect.android.preferences.source.SettingsStore;
import org.odk.collect.android.projects.CurrentProjectProvider;
import org.odk.collect.android.projects.ManualProjectCreatorDialog;
import org.odk.collect.android.projects.ManualProjectCreatorDialog_MembersInjector;
import org.odk.collect.android.projects.ProjectCreator;
import org.odk.collect.android.projects.ProjectDeleter;
import org.odk.collect.android.projects.ProjectImporter;
import org.odk.collect.android.projects.ProjectSettingsDialog;
import org.odk.collect.android.projects.ProjectSettingsDialog_MembersInjector;
import org.odk.collect.android.projects.QrCodeProjectCreatorDialog;
import org.odk.collect.android.projects.QrCodeProjectCreatorDialog_MembersInjector;
import org.odk.collect.android.storage.StoragePathProvider;
import org.odk.collect.android.tasks.InstanceServerUploaderTask;
import org.odk.collect.android.tasks.InstanceServerUploaderTask_MembersInjector;
import org.odk.collect.android.tasks.MediaLoadingTask;
import org.odk.collect.android.tasks.MediaLoadingTask_MembersInjector;
import org.odk.collect.android.upload.InstanceUploader;
import org.odk.collect.android.upload.InstanceUploader_MembersInjector;
import org.odk.collect.android.utilities.ActivityAvailability;
import org.odk.collect.android.utilities.AdminPasswordProvider;
import org.odk.collect.android.utilities.AuthDialogUtility;
import org.odk.collect.android.utilities.AuthDialogUtility_MembersInjector;
import org.odk.collect.android.utilities.ChangeLockProvider;
import org.odk.collect.android.utilities.DeviceDetailsProvider;
import org.odk.collect.android.utilities.ExternalAppIntentProvider;
import org.odk.collect.android.utilities.FileProvider;
import org.odk.collect.android.utilities.FormsRepositoryProvider;
import org.odk.collect.android.utilities.InstancesRepositoryProvider;
import org.odk.collect.android.utilities.LaunchState;
import org.odk.collect.android.utilities.ProjectResetter;
import org.odk.collect.android.utilities.ScreenUtils;
import org.odk.collect.android.utilities.ThemeUtils;
import org.odk.collect.android.utilities.ThemeUtils_MembersInjector;
import org.odk.collect.android.utilities.WebCredentialsUtils;
import org.odk.collect.android.widgets.ExStringWidget;
import org.odk.collect.android.widgets.ExStringWidget_MembersInjector;
import org.odk.collect.android.widgets.QuestionWidget;
import org.odk.collect.android.widgets.QuestionWidget_MembersInjector;
import org.odk.collect.async.Scheduler;
import org.odk.collect.audiorecorder.recording.AudioRecorder;
import org.odk.collect.location.tracker.LocationTracker;
import org.odk.collect.projects.ProjectsRepository;
import org.odk.collect.shared.strings.UUIDGenerator;
import org.odk.collect.utilities.UserAgentProvider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppDependencyComponent implements AppDependencyComponent {
  private final AppDependencyModule appDependencyModule;

  private final Application application;

  private final DaggerAppDependencyComponent appDependencyComponent = this;

  private Provider<Application> applicationProvider;

  private Provider<Context> contextProvider;

  private Provider<SettingsProvider> providesSettingsProvider;

  private Provider<UUIDGenerator> providesUUIDGeneratorProvider;

  private Provider<Gson> providesGsonProvider;

  private Provider<ProjectsRepository> providesProjectsRepositoryProvider;

  private Provider<RxEventBus> provideRxEventBusProvider;

  private Provider<PermissionsChecker> providesPermissionsCheckerProvider;

  private Provider<Analytics> providesAnalyticsProvider;

  private Provider<PermissionsProvider> providesPermissionsProvider;

  private Provider<InstallIDProvider> providesInstallIDProvider;

  private Provider<DeviceDetailsProvider> providesDeviceDetailsProvider;

  private Provider<PropertyManager> providesPropertyManagerProvider;

  private Provider<ExternalAppIntentProvider> providesExternalAppIntentProvider;

  private Provider<MimeTypeMap> provideMimeTypeMapProvider;

  private Provider<UserAgentProvider> providesUserAgentProvider;

  private Provider<OpenRosaHttpInterface> provideHttpInterfaceProvider;

  private Provider<ChangeLockProvider> providesChangeLockProvider;

  private Provider<MapProvider> providesMapProvider;

  private Provider<CurrentProjectProvider> providesCurrentProjectProvider;

  private Provider<StoragePathProvider> providesStoragePathProvider;

  private Provider<InstancesRepositoryProvider> providesInstancesRepositoryProvider;

  private Provider<InstancesAppState> providesInstancesAppStateProvider;

  private Provider<SyncStatusAppState> providesServerFormSyncRepositoryProvider;

  private DaggerAppDependencyComponent(AppDependencyModule appDependencyModuleParam,
      Application applicationParam) {
    this.appDependencyModule = appDependencyModuleParam;
    this.application = applicationParam;
    initialize(appDependencyModuleParam, applicationParam);

  }

  public static AppDependencyComponent.Builder builder() {
    return new Builder();
  }

  private Context context() {
    return AppDependencyModule_ContextFactory.context(appDependencyModule, application);
  }

  private InstallIDProvider installIDProvider() {
    return AppDependencyModule_ProvidesInstallIDProviderFactory.providesInstallIDProvider(appDependencyModule, providesSettingsProvider.get());
  }

  private DeviceDetailsProvider deviceDetailsProvider() {
    return AppDependencyModule_ProvidesDeviceDetailsProviderFactory.providesDeviceDetailsProvider(appDependencyModule, context(), installIDProvider());
  }

  private PermissionsProvider permissionsProvider() {
    return AppDependencyModule_ProvidesPermissionsProviderFactory.providesPermissionsProvider(appDependencyModule, providesPermissionsCheckerProvider.get());
  }

  private WorkManager workManager() {
    return AppDependencyModule_ProvidesWorkManagerFactory.providesWorkManager(appDependencyModule, context());
  }

  private Scheduler scheduler() {
    return AppDependencyModule_ProvidesSchedulerFactory.providesScheduler(appDependencyModule, workManager());
  }

  private InstanceSubmitScheduler instanceSubmitScheduler() {
    return AppDependencyModule_ProvidesFormSubmitManagerFactory.providesFormSubmitManager(appDependencyModule, scheduler(), providesSettingsProvider.get(), application);
  }

  private AudioRecorder audioRecorder() {
    return AppDependencyModule_ProvidesAudioRecorderFactory.providesAudioRecorder(appDependencyModule, application);
  }

  private FormSaveViewModel.FactoryFactory factoryFactory() {
    return AppDependencyModule_ProvidesFormSaveViewModelFactoryFactoryFactory.providesFormSaveViewModelFactoryFactory(appDependencyModule, providesAnalyticsProvider.get(), scheduler(), audioRecorder(), currentProjectProvider());
  }

  private FormEntryViewModel.Factory formEntryViewModelFactory() {
    return AppDependencyModule_ProvidesFormEntryViewModelFactoryFactory.providesFormEntryViewModelFactory(appDependencyModule, AppDependencyModule_ProvidesClockFactory.providesClock(appDependencyModule), providesAnalyticsProvider.get());
  }

  private ActivityAvailability activityAvailability() {
    return AppDependencyModule_ProvidesActivityAvailabilityFactory.providesActivityAvailability(appDependencyModule, context());
  }

  private BackgroundAudioViewModel.Factory backgroundAudioViewModelFactory() {
    return AppDependencyModule_ProvidesBackgroundAudioViewModelFactoryFactory.providesBackgroundAudioViewModelFactory(appDependencyModule, audioRecorder(), providesSettingsProvider.get(), providesPermissionsCheckerProvider.get(), AppDependencyModule_ProvidesClockFactory.providesClock(appDependencyModule), providesAnalyticsProvider.get());
  }

  private WebCredentialsUtils webCredentialsUtils() {
    return AppDependencyModule_ProvideWebCredentialsFactory.provideWebCredentials(appDependencyModule, providesSettingsProvider.get());
  }

  private FormUpdateScheduler formUpdateScheduler() {
    return AppDependencyModule_ProvidesFormUpdateMangerFactory.providesFormUpdateManger(appDependencyModule, scheduler(), providesSettingsProvider.get(), application);
  }

  private SettingsChangeHandler settingsChangeHandler() {
    return AppDependencyModule_ProvidesSettingsChangeHandlerFactory.providesSettingsChangeHandler(appDependencyModule, providesPropertyManagerProvider.get(), formUpdateScheduler(), providesAnalyticsProvider.get(), providesSettingsProvider.get());
  }

  private SettingsStore namedSettingsStore() {
    return AppDependencyModule_ProvidesGeneralSettingsStoreFactory.providesGeneralSettingsStore(appDependencyModule, providesSettingsProvider.get());
  }

  private AdminPasswordProvider adminPasswordProvider() {
    return AppDependencyModule_ProvidesAdminPasswordProviderFactory.providesAdminPasswordProvider(appDependencyModule, providesSettingsProvider.get());
  }

  private ProjectPreferencesViewModel.Factory projectPreferencesViewModelFactory() {
    return AppDependencyModule_ProvidesProjectPreferencesViewModelFactory.providesProjectPreferencesViewModel(appDependencyModule, adminPasswordProvider());
  }

  private PreferenceVisibilityHandler preferenceVisibilityHandler() {
    return AppDependencyModule_ProvidesDisabledPreferencesRemoverFactory.providesDisabledPreferencesRemover(appDependencyModule, providesSettingsProvider.get(), AppDependencyModule_ProvidesVersionInformationFactory.providesVersionInformation(appDependencyModule));
  }

  private GoogleAccountPicker googleAccountPicker() {
    return AppDependencyModule_ProvidesGoogleAccountPickerFactory.providesGoogleAccountPicker(appDependencyModule, context());
  }

  private GoogleAccountsManager googleAccountsManager() {
    return new GoogleAccountsManager(context(), googleAccountPicker(), providesSettingsProvider.get());
  }

  private SettingsStore namedSettingsStore2() {
    return AppDependencyModule_ProvidesAdminSettingsStoreFactory.providesAdminSettingsStore(appDependencyModule, providesSettingsProvider.get());
  }

  private ProjectDeleter projectDeleter() {
    return AppDependencyModule_ProvidesProjectDeleterFactory.providesProjectDeleter(appDependencyModule, providesProjectsRepositoryProvider.get(), currentProjectProvider(), formUpdateScheduler(), instanceSubmitScheduler(), instancesRepositoryProvider(), storagePathProvider(), providesChangeLockProvider.get(), providesSettingsProvider.get());
  }

  private ServerFormsDetailsFetcher serverFormsDetailsFetcher() {
    return AppDependencyModule_ProvidesServerFormDetailsFetcherFactory.providesServerFormDetailsFetcher(appDependencyModule, formsRepositoryProvider(), formSourceProvider(), storagePathProvider());
  }

  private FormDownloader formDownloader() {
    return AppDependencyModule_ProvidesFormDownloaderFactory.providesFormDownloader(appDependencyModule, formSourceProvider(), formsRepositoryProvider(), storagePathProvider(), providesAnalyticsProvider.get());
  }

  private GoogleApiProvider googleApiProvider() {
    return AppDependencyModule_ProvidesGoogleApiProviderFactory.providesGoogleApiProvider(appDependencyModule, context());
  }

  private AudioHelperFactory audioHelperFactory() {
    return AppDependencyModule_ProvidesAudioHelperFactoryFactory.providesAudioHelperFactory(appDependencyModule, scheduler());
  }

  private ScreenUtils screenUtils() {
    return AppDependencyModule_ProvidesScreenUtilsFactory.providesScreenUtils(appDependencyModule, context());
  }

  private LocationTracker locationTracker() {
    return AppDependencyModule_ProvidesLocationTrackerFactory.providesLocationTracker(appDependencyModule, application);
  }

  private MainMenuViewModel.Factory mainMenuViewModelFactory() {
    return AppDependencyModule_ProvidesMainMenuViewModelFactoryFactory.providesMainMenuViewModelFactory(appDependencyModule, AppDependencyModule_ProvidesVersionInformationFactory.providesVersionInformation(appDependencyModule), application, providesSettingsProvider.get(), providesInstancesAppStateProvider.get(), scheduler());
  }

  private AnalyticsInitializer analyticsInitializer() {
    return AppDependencyModule_ProvidesAnalyticsInitializerFactory.providesAnalyticsInitializer(appDependencyModule, providesAnalyticsProvider.get(), AppDependencyModule_ProvidesVersionInformationFactory.providesVersionInformation(appDependencyModule), providesSettingsProvider.get());
  }

  private CurrentProjectViewModel.Factory currentProjectViewModelFactory() {
    return AppDependencyModule_ProvidesCurrentProjectViewModelFactory.providesCurrentProjectViewModel(appDependencyModule, currentProjectProvider(), analyticsInitializer(), storagePathProvider(), providesProjectsRepositoryProvider.get());
  }

  private QRCodeGenerator qRCodeGenerator() {
    return AppDependencyModule_ProvidesQRCodeGeneratorFactory.providesQRCodeGenerator(appDependencyModule, context());
  }

  private FileProvider fileProvider() {
    return AppDependencyModule_ProvidesFileProviderFactory.providesFileProvider(appDependencyModule, context());
  }

  private AppConfigurationGenerator appConfigurationGenerator() {
    return AppDependencyModule_ProvidesJsonPreferencesGeneratorFactory.providesJsonPreferencesGenerator(appDependencyModule, providesSettingsProvider.get(), currentProjectProvider());
  }

  private Notifier notifier() {
    return AppDependencyModule_ProvidesNotifierFactory.providesNotifier(appDependencyModule, application, providesSettingsProvider.get());
  }

  private InstanceAutoSender instanceAutoSender() {
    return AppDependencyModule_ProvidesInstanceAutoSenderFactory.providesInstanceAutoSender(appDependencyModule, context(), providesChangeLockProvider.get(), notifier(), providesAnalyticsProvider.get(), formsRepositoryProvider(), instancesRepositoryProvider(), googleAccountsManager(), googleApiProvider(), permissionsProvider(), providesSettingsProvider.get(), providesInstancesAppStateProvider.get());
  }

  private SplashScreenViewModel.Factory splashScreenViewModelFactory() {
    return AppDependencyModule_ProvidesSplashScreenViewModelFactory.providesSplashScreenViewModel(appDependencyModule, providesSettingsProvider.get(), providesProjectsRepositoryProvider.get());
  }

  private FormsUpdater formsUpdater() {
    return AppDependencyModule_ProvidesFormUpdateCheckerFactory.providesFormUpdateChecker(appDependencyModule, context(), notifier(), providesAnalyticsProvider.get(), storagePathProvider(), providesSettingsProvider.get(), formsRepositoryProvider(), formSourceProvider(), providesServerFormSyncRepositoryProvider.get(), instancesRepositoryProvider(), providesChangeLockProvider.get());
  }

  private BlankFormsListViewModel.Factory blankFormsListViewModelFactory() {
    return new BlankFormsListViewModel.Factory(application, scheduler(), providesServerFormSyncRepositoryProvider.get(), providesSettingsProvider.get(), providesAnalyticsProvider.get(), formsUpdater(), currentProjectProvider(), formsRepositoryProvider());
  }

  private ProjectCreator projectCreator() {
    return AppDependencyModule_ProvidesProjectCreatorFactory.providesProjectCreator(appDependencyModule, projectImporter(), providesProjectsRepositoryProvider.get(), currentProjectProvider(), settingsImporter(), context(), storagePathProvider());
  }

  private LaunchState launchState() {
    return AppDependencyModule_ProvidesAppStateProviderFactory.providesAppStateProvider(appDependencyModule, context(), providesSettingsProvider.get());
  }

  private FormUpdatesUpgrade formUpdatesUpgrade() {
    return AppDependencyModule_ProvidesFormUpdatesUpgraderFactory.providesFormUpdatesUpgrader(appDependencyModule, scheduler(), providesProjectsRepositoryProvider.get(), formUpdateScheduler());
  }

  private SettingsMigrator settingsMigrator() {
    return AppDependencyModule_ProvidesPreferenceMigratorFactory.providesPreferenceMigrator(appDependencyModule, providesSettingsProvider.get());
  }

  private ExistingSettingsMigrator existingSettingsMigrator() {
    return AppDependencyModule_ProvidesExistingSettingsMigratorFactory.providesExistingSettingsMigrator(appDependencyModule, providesProjectsRepositoryProvider.get(), providesSettingsProvider.get(), settingsMigrator());
  }

  private AppUpgrader appUpgrader() {
    return AppDependencyModule_ProvidesAppUpgraderFactory.providesAppUpgrader(appDependencyModule, providesSettingsProvider.get(), existingProjectMigrator(), formUpdatesUpgrade(), existingSettingsMigrator());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppDependencyModule appDependencyModuleParam,
      final Application applicationParam) {
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.contextProvider = AppDependencyModule_ContextFactory.create(appDependencyModuleParam, applicationProvider);
    this.providesSettingsProvider = DoubleCheck.provider(AppDependencyModule_ProvidesSettingsProviderFactory.create(appDependencyModuleParam, contextProvider));
    this.providesUUIDGeneratorProvider = DoubleCheck.provider(AppDependencyModule_ProvidesUUIDGeneratorFactory.create(appDependencyModuleParam));
    this.providesGsonProvider = AppDependencyModule_ProvidesGsonFactory.create(appDependencyModuleParam);
    this.providesProjectsRepositoryProvider = DoubleCheck.provider(AppDependencyModule_ProvidesProjectsRepositoryFactory.create(appDependencyModuleParam, providesUUIDGeneratorProvider, providesGsonProvider, providesSettingsProvider));
    this.provideRxEventBusProvider = DoubleCheck.provider(AppDependencyModule_ProvideRxEventBusFactory.create(appDependencyModuleParam));
    this.providesPermissionsCheckerProvider = DoubleCheck.provider(AppDependencyModule_ProvidesPermissionsCheckerFactory.create(appDependencyModuleParam, contextProvider));
    this.providesAnalyticsProvider = DoubleCheck.provider(AppDependencyModule_ProvidesAnalyticsFactory.create(appDependencyModuleParam, applicationProvider));
    this.providesPermissionsProvider = AppDependencyModule_ProvidesPermissionsProviderFactory.create(appDependencyModuleParam, providesPermissionsCheckerProvider);
    this.providesInstallIDProvider = AppDependencyModule_ProvidesInstallIDProviderFactory.create(appDependencyModuleParam, providesSettingsProvider);
    this.providesDeviceDetailsProvider = AppDependencyModule_ProvidesDeviceDetailsProviderFactory.create(appDependencyModuleParam, contextProvider, providesInstallIDProvider);
    this.providesPropertyManagerProvider = DoubleCheck.provider(AppDependencyModule_ProvidesPropertyManagerFactory.create(appDependencyModuleParam, provideRxEventBusProvider, providesPermissionsProvider, providesDeviceDetailsProvider, providesSettingsProvider));
    this.providesExternalAppIntentProvider = DoubleCheck.provider(AppDependencyModule_ProvidesExternalAppIntentProviderFactory.create(appDependencyModuleParam));
    this.provideMimeTypeMapProvider = AppDependencyModule_ProvideMimeTypeMapFactory.create(appDependencyModuleParam);
    this.providesUserAgentProvider = DoubleCheck.provider(AppDependencyModule_ProvidesUserAgentFactory.create(appDependencyModuleParam));
    this.provideHttpInterfaceProvider = DoubleCheck.provider(AppDependencyModule_ProvideHttpInterfaceFactory.create(appDependencyModuleParam, provideMimeTypeMapProvider, providesUserAgentProvider));
    this.providesChangeLockProvider = DoubleCheck.provider(AppDependencyModule_ProvidesChangeLockProviderFactory.create(appDependencyModuleParam));
    this.providesMapProvider = DoubleCheck.provider(AppDependencyModule_ProvidesMapProviderFactory.create(appDependencyModuleParam));
    this.providesCurrentProjectProvider = AppDependencyModule_ProvidesCurrentProjectProviderFactory.create(appDependencyModuleParam, providesSettingsProvider, providesProjectsRepositoryProvider);
    this.providesStoragePathProvider = AppDependencyModule_ProvidesStoragePathProviderFactory.create(appDependencyModuleParam, contextProvider, providesCurrentProjectProvider);
    this.providesInstancesRepositoryProvider = AppDependencyModule_ProvidesInstancesRepositoryProviderFactory.create(appDependencyModuleParam, contextProvider, providesStoragePathProvider);
    this.providesInstancesAppStateProvider = DoubleCheck.provider(AppDependencyModule_ProvidesInstancesAppStateFactory.create(appDependencyModuleParam, applicationProvider, providesInstancesRepositoryProvider, providesCurrentProjectProvider));
    this.providesServerFormSyncRepositoryProvider = DoubleCheck.provider(AppDependencyModule_ProvidesServerFormSyncRepositoryFactory.create(appDependencyModuleParam, contextProvider));
  }

  @Override
  public void inject(Collect collect) {
    injectCollect(collect);
  }

  @Override
  public void inject(InstanceUploaderAdapter instanceUploaderAdapter) {
  }

  @Override
  public void inject(SavedFormListFragment savedFormListFragment) {
    injectSavedFormListFragment(savedFormListFragment);
  }

  @Override
  public void inject(PropertyManager propertyManager) {
    injectPropertyManager(propertyManager);
  }

  @Override
  public void inject(FormEntryActivity formEntryActivity) {
    injectFormEntryActivity(formEntryActivity);
  }

  @Override
  public void inject(InstanceServerUploaderTask uploader) {
    injectInstanceServerUploaderTask(uploader);
  }

  @Override
  public void inject(ServerPreferencesFragment serverPreferencesFragment) {
    injectServerPreferencesFragment(serverPreferencesFragment);
  }

  @Override
  public void inject(ProjectDisplayPreferencesFragment projectDisplayPreferencesFragment) {
    injectProjectDisplayPreferencesFragment(projectDisplayPreferencesFragment);
  }

  @Override
  public void inject(ProjectManagementPreferencesFragment projectManagementPreferencesFragment) {
    injectProjectManagementPreferencesFragment(projectManagementPreferencesFragment);
  }

  @Override
  public void inject(AuthDialogUtility authDialogUtility) {
    injectAuthDialogUtility(authDialogUtility);
  }

  @Override
  public void inject(FormDownloadListActivity formDownloadListActivity) {
    injectFormDownloadListActivity(formDownloadListActivity);
  }

  @Override
  public void inject(InstanceUploaderListActivity activity) {
    injectInstanceUploaderListActivity(activity);
  }

  @Override
  public void inject(GoogleDriveActivity googleDriveActivity) {
    injectGoogleDriveActivity(googleDriveActivity);
  }

  @Override
  public void inject(GoogleSheetsUploaderActivity googleSheetsUploaderActivity) {
    injectGoogleSheetsUploaderActivity(googleSheetsUploaderActivity);
  }

  @Override
  public void inject(QuestionWidget questionWidget) {
    injectQuestionWidget(questionWidget);
  }

  @Override
  public void inject(ExStringWidget exStringWidget) {
    injectExStringWidget(exStringWidget);
  }

  @Override
  public void inject(ODKView odkView) {
    injectODKView(odkView);
  }

  @Override
  public void inject(FormMetadataPreferencesFragment formMetadataPreferencesFragment) {
    injectFormMetadataPreferencesFragment(formMetadataPreferencesFragment);
  }

  @Override
  public void inject(GeoPointMapActivity geoMapActivity) {
    injectGeoPointMapActivity(geoMapActivity);
  }

  @Override
  public void inject(GeoPolyActivity geoPolyActivity) {
    injectGeoPolyActivity(geoPolyActivity);
  }

  @Override
  public void inject(FormMapActivity formMapActivity) {
    injectFormMapActivity(formMapActivity);
  }

  @Override
  public void inject(OsmDroidMapFragment mapFragment) {
    injectOsmDroidMapFragment(mapFragment);
  }

  @Override
  public void inject(GoogleMapFragment mapFragment) {
    injectGoogleMapFragment(mapFragment);
  }

  @Override
  public void inject(MapboxMapFragment mapFragment) {
    injectMapboxMapFragment(mapFragment);
  }

  @Override
  public void inject(MainMenuActivity mainMenuActivity) {
    injectMainMenuActivity(mainMenuActivity);
  }

  @Override
  public void inject(QRCodeTabsActivity qrCodeTabsActivity) {
    injectQRCodeTabsActivity(qrCodeTabsActivity);
  }

  @Override
  public void inject(ShowQRCodeFragment showQRCodeFragment) {
    injectShowQRCodeFragment(showQRCodeFragment);
  }

  @Override
  public void inject(AutoSendTaskSpec autoSendTaskSpec) {
    injectAutoSendTaskSpec(autoSendTaskSpec);
  }

  @Override
  public void inject(AdminPasswordDialogFragment adminPasswordDialogFragment) {
    injectAdminPasswordDialogFragment(adminPasswordDialogFragment);
  }

  @Override
  public void inject(SplashScreenActivity splashScreenActivity) {
    injectSplashScreenActivity(splashScreenActivity);
  }

  @Override
  public void inject(FormHierarchyActivity formHierarchyActivity) {
    injectFormHierarchyActivity(formHierarchyActivity);
  }

  @Override
  public void inject(FormManagementPreferencesFragment formManagementPreferencesFragment) {
    injectFormManagementPreferencesFragment(formManagementPreferencesFragment);
  }

  @Override
  public void inject(IdentityPreferencesFragment identityPreferencesFragment) {
    injectIdentityPreferencesFragment(identityPreferencesFragment);
  }

  @Override
  public void inject(UserInterfacePreferencesFragment userInterfacePreferencesFragment) {
    injectUserInterfacePreferencesFragment(userInterfacePreferencesFragment);
  }

  @Override
  public void inject(SaveFormProgressDialogFragment saveFormProgressDialogFragment) {
    injectSaveFormProgressDialogFragment(saveFormProgressDialogFragment);
  }

  @Override
  public void inject(QuitFormDialogFragment quitFormDialogFragment) {
    injectQuitFormDialogFragment(quitFormDialogFragment);
  }

  @Override
  public void inject(BarCodeScannerFragment barCodeScannerFragment) {
    injectBarCodeScannerFragment(barCodeScannerFragment);
  }

  @Override
  public void inject(QRCodeScannerFragment qrCodeScannerFragment) {
    injectQRCodeScannerFragment(qrCodeScannerFragment);
  }

  @Override
  public void inject(ProjectPreferencesActivity projectPreferencesActivity) {
    injectProjectPreferencesActivity(projectPreferencesActivity);
  }

  @Override
  public void inject(ResetDialogPreferenceFragmentCompat resetDialogPreferenceFragmentCompat) {
    injectResetDialogPreferenceFragmentCompat(resetDialogPreferenceFragmentCompat);
  }

  @Override
  public void inject(FillBlankFormActivity fillBlankFormActivity) {
    injectFillBlankFormActivity(fillBlankFormActivity);
  }

  @Override
  public void inject(MapBoxInitializationFragment mapBoxInitializationFragment) {
    injectMapBoxInitializationFragment(mapBoxInitializationFragment);
  }

  @Override
  public void inject(SyncFormsTaskSpec syncWork) {
    injectSyncFormsTaskSpec(syncWork);
  }

  @Override
  public void inject(ExperimentalPreferencesFragment experimentalPreferencesFragment) {
    injectExperimentalPreferencesFragment(experimentalPreferencesFragment);
  }

  @Override
  public void inject(AutoUpdateTaskSpec autoUpdateTaskSpec) {
    injectAutoUpdateTaskSpec(autoUpdateTaskSpec);
  }

  @Override
  public void inject(ServerAuthDialogFragment serverAuthDialogFragment) {
    injectServerAuthDialogFragment(serverAuthDialogFragment);
  }

  @Override
  public void inject(BasePreferencesFragment basePreferencesFragment) {
    injectBasePreferencesFragment(basePreferencesFragment);
  }

  @Override
  public void inject(BlankFormListFragment blankFormListFragment) {
    injectBlankFormListFragment(blankFormListFragment);
  }

  @Override
  public void inject(InstanceUploaderActivity instanceUploaderActivity) {
    injectInstanceUploaderActivity(instanceUploaderActivity);
  }

  @Override
  public void inject(ProjectPreferencesFragment projectPreferencesFragment) {
    injectProjectPreferencesFragment(projectPreferencesFragment);
  }

  @Override
  public void inject(DeleteSavedFormActivity deleteSavedFormActivity) {
    injectDeleteSavedFormActivity(deleteSavedFormActivity);
  }

  @Override
  public void inject(SelectMinimalDialog selectMinimalDialog) {
    injectSelectMinimalDialog(selectMinimalDialog);
  }

  @Override
  public void inject(AudioRecordingControllerFragment audioRecordingControllerFragment) {
    injectAudioRecordingControllerFragment(audioRecordingControllerFragment);
  }

  @Override
  public void inject(SaveAnswerFileErrorDialogFragment saveAnswerFileErrorDialogFragment) {
    injectSaveAnswerFileErrorDialogFragment(saveAnswerFileErrorDialogFragment);
  }

  @Override
  public void inject(AudioRecordingErrorDialogFragment audioRecordingErrorDialogFragment) {
    injectAudioRecordingErrorDialogFragment(audioRecordingErrorDialogFragment);
  }

  @Override
  public void inject(CollectAbstractActivity collectAbstractActivity) {
    injectCollectAbstractActivity(collectAbstractActivity);
  }

  @Override
  public void inject(InstanceChooserList instanceChooserList) {
    injectInstanceChooserList(instanceChooserList);
  }

  @Override
  public void inject(FormsProvider formsProvider) {
    injectFormsProvider(formsProvider);
  }

  @Override
  public void inject(InstanceProvider instanceProvider) {
    injectInstanceProvider(instanceProvider);
  }

  @Override
  public void inject(
      BackgroundAudioPermissionDialogFragment backgroundAudioPermissionDialogFragment) {
    injectBackgroundAudioPermissionDialogFragment(backgroundAudioPermissionDialogFragment);
  }

  @Override
  public void inject(AppListFragment appListFragment) {
    injectAppListFragment(appListFragment);
  }

  @Override
  public void inject(ChangeAdminPasswordDialog changeAdminPasswordDialog) {
    injectChangeAdminPasswordDialog(changeAdminPasswordDialog);
  }

  @Override
  public void inject(MediaLoadingTask mediaLoadingTask) {
    injectMediaLoadingTask(mediaLoadingTask);
  }

  @Override
  public void inject(ThemeUtils themeUtils) {
    injectThemeUtils(themeUtils);
  }

  @Override
  public void inject(BaseProjectPreferencesFragment baseProjectPreferencesFragment) {
    injectBaseProjectPreferencesFragment(baseProjectPreferencesFragment);
  }

  @Override
  public void inject(BaseAdminPreferencesFragment baseAdminPreferencesFragment) {
    injectBaseAdminPreferencesFragment(baseAdminPreferencesFragment);
  }

  @Override
  public void inject(CaptionedListPreference captionedListPreference) {
    injectCaptionedListPreference(captionedListPreference);
  }

  @Override
  public void inject(AndroidShortcutsActivity androidShortcutsActivity) {
    injectAndroidShortcutsActivity(androidShortcutsActivity);
  }

  @Override
  public void inject(ProjectSettingsDialog projectSettingsDialog) {
    injectProjectSettingsDialog(projectSettingsDialog);
  }

  @Override
  public void inject(ManualProjectCreatorDialog manualProjectCreatorDialog) {
    injectManualProjectCreatorDialog(manualProjectCreatorDialog);
  }

  @Override
  public void inject(QrCodeProjectCreatorDialog qrCodeProjectCreatorDialog) {
    injectQrCodeProjectCreatorDialog(qrCodeProjectCreatorDialog);
  }

  @Override
  public void inject(FirstLaunchActivity firstLaunchActivity) {
    injectFirstLaunchActivity(firstLaunchActivity);
  }

  @Override
  public void inject(InstanceUploader instanceUploader) {
    injectInstanceUploader(instanceUploader);
  }

  @Override
  public void inject(FormUriActivity formUriActivity) {
    injectFormUriActivity(formUriActivity);
  }

  @Override
  public OpenRosaHttpInterface openRosaHttpInterface() {
    return provideHttpInterfaceProvider.get();
  }

  @Override
  public ReferenceManager referenceManager() {
    return AppDependencyModule_ProvidesReferenceManagerFactory.providesReferenceManager(appDependencyModule);
  }

  @Override
  public Analytics analytics() {
    return providesAnalyticsProvider.get();
  }

  @Override
  public SettingsProvider settingsProvider() {
    return providesSettingsProvider.get();
  }

  @Override
  public ApplicationInitializer applicationInitializer() {
    return AppDependencyModule_ProvidesApplicationInitializerFactory.providesApplicationInitializer(appDependencyModule, application, providesUserAgentProvider.get(), providesPropertyManagerProvider.get(), providesAnalyticsProvider.get(), launchState(), appUpgrader(), analyticsInitializer(), providesProjectsRepositoryProvider.get());
  }

  @Override
  public SettingsImporter settingsImporter() {
    return AppDependencyModule_ProvidesCollectSettingsImporterFactory.providesCollectSettingsImporter(appDependencyModule, providesSettingsProvider.get(), settingsMigrator(), AppDependencyModule_ProvidesSettingsValidatorFactory.providesSettingsValidator(appDependencyModule), settingsChangeHandler(), providesProjectsRepositoryProvider.get(), context());
  }

  @Override
  public ProjectsRepository projectsRepository() {
    return providesProjectsRepositoryProvider.get();
  }

  @Override
  public CurrentProjectProvider currentProjectProvider() {
    return AppDependencyModule_ProvidesCurrentProjectProviderFactory.providesCurrentProjectProvider(appDependencyModule, providesSettingsProvider.get(), providesProjectsRepositoryProvider.get());
  }

  @Override
  public InstancesAppState instancesAppState() {
    return providesInstancesAppStateProvider.get();
  }

  @Override
  public ProjectImporter projectImporter() {
    return AppDependencyModule_ProvidesProjectImporterFactory.providesProjectImporter(appDependencyModule, providesProjectsRepositoryProvider.get(), storagePathProvider());
  }

  @Override
  public StoragePathProvider storagePathProvider() {
    return AppDependencyModule_ProvidesStoragePathProviderFactory.providesStoragePathProvider(appDependencyModule, context(), currentProjectProvider());
  }

  @Override
  public FormsRepositoryProvider formsRepositoryProvider() {
    return AppDependencyModule_ProvidesFormsRepositoryProviderFactory.providesFormsRepositoryProvider(appDependencyModule, application);
  }

  @Override
  public InstancesRepositoryProvider instancesRepositoryProvider() {
    return AppDependencyModule_ProvidesInstancesRepositoryProviderFactory.providesInstancesRepositoryProvider(appDependencyModule, context(), storagePathProvider());
  }

  @Override
  public SyncStatusAppState syncStatusAppState() {
    return providesServerFormSyncRepositoryProvider.get();
  }

  @Override
  public FormSourceProvider formSourceProvider() {
    return AppDependencyModule_ProvidesFormSourceProviderFactory.providesFormSourceProvider(appDependencyModule, providesSettingsProvider.get(), provideHttpInterfaceProvider.get());
  }

  @Override
  public ExistingProjectMigrator existingProjectMigrator() {
    return AppDependencyModule_ProvidesExistingProjectMigratorFactory.providesExistingProjectMigrator(appDependencyModule, context(), storagePathProvider(), providesProjectsRepositoryProvider.get(), providesSettingsProvider.get(), currentProjectProvider());
  }

  @Override
  public ProjectResetter projectResetter() {
    return AppDependencyModule_ProvidesProjectResetterFactory.providesProjectResetter(appDependencyModule, storagePathProvider(), providesPropertyManagerProvider.get(), providesSettingsProvider.get(), instancesRepositoryProvider(), formsRepositoryProvider());
  }

  @CanIgnoreReturnValue
  private Collect injectCollect(Collect instance) {
    Collect_MembersInjector.injectApplicationInitializer(instance, applicationInitializer());
    Collect_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    Collect_MembersInjector.injectProjectsRepository(instance, providesProjectsRepositoryProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private SavedFormListFragment injectSavedFormListFragment(SavedFormListFragment instance) {
    AppListFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    SavedFormListFragment_MembersInjector.injectInstancesRepositoryProvider(instance, instancesRepositoryProvider());
    SavedFormListFragment_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    SavedFormListFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private PropertyManager injectPropertyManager(PropertyManager instance) {
    PropertyManager_MembersInjector.injectEventBus(instance, provideRxEventBusProvider.get());
    PropertyManager_MembersInjector.injectDeviceDetailsProvider(instance, deviceDetailsProvider());
    PropertyManager_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    PropertyManager_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private FormEntryActivity injectFormEntryActivity(FormEntryActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    FormEntryActivity_MembersInjector.injectEventBus(instance, provideRxEventBusProvider.get());
    FormEntryActivity_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    FormEntryActivity_MembersInjector.injectStoragePathProvider(instance, storagePathProvider());
    FormEntryActivity_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    FormEntryActivity_MembersInjector.injectPropertyManager(instance, providesPropertyManagerProvider.get());
    FormEntryActivity_MembersInjector.injectInstanceSubmitScheduler(instance, instanceSubmitScheduler());
    FormEntryActivity_MembersInjector.injectScheduler(instance, scheduler());
    FormEntryActivity_MembersInjector.injectAudioRecorder(instance, audioRecorder());
    FormEntryActivity_MembersInjector.injectFormSaveViewModelFactoryFactory(instance, factoryFactory());
    FormEntryActivity_MembersInjector.injectFormEntryViewModelFactory(instance, formEntryViewModelFactory());
    FormEntryActivity_MembersInjector.injectSoftKeyboardController(instance, AppDependencyModule_ProvideSoftKeyboardControllerFactory.provideSoftKeyboardController(appDependencyModule));
    FormEntryActivity_MembersInjector.injectPermissionsChecker(instance, providesPermissionsCheckerProvider.get());
    FormEntryActivity_MembersInjector.injectActivityAvailability(instance, activityAvailability());
    FormEntryActivity_MembersInjector.injectExternalAppIntentProvider(instance, providesExternalAppIntentProvider.get());
    FormEntryActivity_MembersInjector.injectBackgroundAudioViewModelFactory(instance, backgroundAudioViewModelFactory());
    FormEntryActivity_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private InstanceServerUploaderTask injectInstanceServerUploaderTask(
      InstanceServerUploaderTask instance) {
    InstanceServerUploaderTask_MembersInjector.injectHttpInterface(instance, provideHttpInterfaceProvider.get());
    InstanceServerUploaderTask_MembersInjector.injectWebCredentialsUtils(instance, webCredentialsUtils());
    InstanceServerUploaderTask_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ServerPreferencesFragment injectServerPreferencesFragment(
      ServerPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectGeneralSettingsStore(instance, namedSettingsStore());
    BaseProjectPreferencesFragment_MembersInjector.injectAdminPasswordProvider(instance, adminPasswordProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    BaseProjectPreferencesFragment_MembersInjector.injectPreferenceVisibilityHandler(instance, preferenceVisibilityHandler());
    ServerPreferencesFragment_MembersInjector.injectAccountsManager(instance, googleAccountsManager());
    ServerPreferencesFragment_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    ServerPreferencesFragment_MembersInjector.injectFormUpdateScheduler(instance, formUpdateScheduler());
    ServerPreferencesFragment_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private ProjectDisplayPreferencesFragment injectProjectDisplayPreferencesFragment(
      ProjectDisplayPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseAdminPreferencesFragment_MembersInjector.injectAdminSettingsStore(instance, namedSettingsStore2());
    ProjectDisplayPreferencesFragment_MembersInjector.injectProjectsRepository(instance, providesProjectsRepositoryProvider.get());
    ProjectDisplayPreferencesFragment_MembersInjector.injectStoragePathProvider(instance, storagePathProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private ProjectManagementPreferencesFragment injectProjectManagementPreferencesFragment(
      ProjectManagementPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseAdminPreferencesFragment_MembersInjector.injectAdminSettingsStore(instance, namedSettingsStore2());
    ProjectManagementPreferencesFragment_MembersInjector.injectProjectDeleter(instance, projectDeleter());
    return instance;
  }

  @CanIgnoreReturnValue
  private AuthDialogUtility injectAuthDialogUtility(AuthDialogUtility instance) {
    AuthDialogUtility_MembersInjector.injectWebCredentialsUtils(instance, webCredentialsUtils());
    AuthDialogUtility_MembersInjector.injectPropertyManager(instance, providesPropertyManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private FormDownloadListActivity injectFormDownloadListActivity(
      FormDownloadListActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    FormDownloadListActivity_MembersInjector.injectWebCredentialsUtils(instance, webCredentialsUtils());
    FormDownloadListActivity_MembersInjector.injectServerFormsDetailsFetcher(instance, serverFormsDetailsFetcher());
    FormDownloadListActivity_MembersInjector.injectConnectivityProvider(instance, AppDependencyModule_ProvidesConnectivityProviderFactory.providesConnectivityProvider(appDependencyModule));
    FormDownloadListActivity_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    FormDownloadListActivity_MembersInjector.injectFormDownloader(instance, formDownloader());
    return instance;
  }

  @CanIgnoreReturnValue
  private InstanceUploaderListActivity injectInstanceUploaderListActivity(
      InstanceUploaderListActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    InstanceUploaderListActivity_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    InstanceUploaderListActivity_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    InstanceUploaderListActivity_MembersInjector.injectConnectivityProvider(instance, AppDependencyModule_ProvidesConnectivityProviderFactory.providesConnectivityProvider(appDependencyModule));
    InstanceUploaderListActivity_MembersInjector.injectInstanceSubmitScheduler(instance, instanceSubmitScheduler());
    return instance;
  }

  @CanIgnoreReturnValue
  private GoogleDriveActivity injectGoogleDriveActivity(GoogleDriveActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    GoogleDriveActivity_MembersInjector.injectAccountsManager(instance, googleAccountsManager());
    GoogleDriveActivity_MembersInjector.injectStoragePathProvider(instance, storagePathProvider());
    GoogleDriveActivity_MembersInjector.injectConnectivityProvider(instance, AppDependencyModule_ProvidesConnectivityProviderFactory.providesConnectivityProvider(appDependencyModule));
    GoogleDriveActivity_MembersInjector.injectGoogleApiProvider(instance, googleApiProvider());
    GoogleDriveActivity_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private GoogleSheetsUploaderActivity injectGoogleSheetsUploaderActivity(
      GoogleSheetsUploaderActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    GoogleSheetsUploaderActivity_MembersInjector.injectAccountsManager(instance, googleAccountsManager());
    GoogleSheetsUploaderActivity_MembersInjector.injectGoogleApiProvider(instance, googleApiProvider());
    GoogleSheetsUploaderActivity_MembersInjector.injectConnectivityProvider(instance, AppDependencyModule_ProvidesConnectivityProviderFactory.providesConnectivityProvider(appDependencyModule));
    GoogleSheetsUploaderActivity_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    GoogleSheetsUploaderActivity_MembersInjector.injectInstancesRepositoryProvider(instance, instancesRepositoryProvider());
    GoogleSheetsUploaderActivity_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private QuestionWidget injectQuestionWidget(QuestionWidget instance) {
    QuestionWidget_MembersInjector.injectReferenceManager(instance, AppDependencyModule_ProvidesReferenceManagerFactory.providesReferenceManager(appDependencyModule));
    QuestionWidget_MembersInjector.injectAudioHelperFactory(instance, audioHelperFactory());
    QuestionWidget_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    QuestionWidget_MembersInjector.injectScreenUtils(instance, screenUtils());
    QuestionWidget_MembersInjector.injectSoftKeyboardController(instance, AppDependencyModule_ProvideSoftKeyboardControllerFactory.provideSoftKeyboardController(appDependencyModule));
    QuestionWidget_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    QuestionWidget_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ExStringWidget injectExStringWidget(ExStringWidget instance) {
    QuestionWidget_MembersInjector.injectReferenceManager(instance, AppDependencyModule_ProvidesReferenceManagerFactory.providesReferenceManager(appDependencyModule));
    QuestionWidget_MembersInjector.injectAudioHelperFactory(instance, audioHelperFactory());
    QuestionWidget_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    QuestionWidget_MembersInjector.injectScreenUtils(instance, screenUtils());
    QuestionWidget_MembersInjector.injectSoftKeyboardController(instance, AppDependencyModule_ProvideSoftKeyboardControllerFactory.provideSoftKeyboardController(appDependencyModule));
    QuestionWidget_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    QuestionWidget_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    ExStringWidget_MembersInjector.injectActivityAvailability(instance, activityAvailability());
    return instance;
  }

  @CanIgnoreReturnValue
  private ODKView injectODKView(ODKView instance) {
    ODKView_MembersInjector.injectAudioHelperFactory(instance, audioHelperFactory());
    ODKView_MembersInjector.injectActivityAvailability(instance, activityAvailability());
    ODKView_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    ODKView_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private FormMetadataPreferencesFragment injectFormMetadataPreferencesFragment(
      FormMetadataPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectGeneralSettingsStore(instance, namedSettingsStore());
    BaseProjectPreferencesFragment_MembersInjector.injectAdminPasswordProvider(instance, adminPasswordProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    BaseProjectPreferencesFragment_MembersInjector.injectPreferenceVisibilityHandler(instance, preferenceVisibilityHandler());
    FormMetadataPreferencesFragment_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    FormMetadataPreferencesFragment_MembersInjector.injectPropertyManager(instance, providesPropertyManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private GeoPointMapActivity injectGeoPointMapActivity(GeoPointMapActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    GeoPointMapActivity_MembersInjector.injectMapProvider(instance, providesMapProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private GeoPolyActivity injectGeoPolyActivity(GeoPolyActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    GeoPolyActivity_MembersInjector.injectMapProvider(instance, providesMapProvider.get());
    GeoPolyActivity_MembersInjector.injectLocationTracker(instance, locationTracker());
    return instance;
  }

  @CanIgnoreReturnValue
  private FormMapActivity injectFormMapActivity(FormMapActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    FormMapActivity_MembersInjector.injectMapProvider(instance, providesMapProvider.get());
    FormMapActivity_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    FormMapActivity_MembersInjector.injectInstancesRepositoryProvider(instance, instancesRepositoryProvider());
    FormMapActivity_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private OsmDroidMapFragment injectOsmDroidMapFragment(OsmDroidMapFragment instance) {
    OsmDroidMapFragment_MembersInjector.injectMapProvider(instance, providesMapProvider.get());
    OsmDroidMapFragment_MembersInjector.injectStoragePathProvider(instance, storagePathProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private GoogleMapFragment injectGoogleMapFragment(GoogleMapFragment instance) {
    GoogleMapFragment_MembersInjector.injectMapProvider(instance, providesMapProvider.get());
    GoogleMapFragment_MembersInjector.injectStoragePathProvider(instance, storagePathProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private MapboxMapFragment injectMapboxMapFragment(MapboxMapFragment instance) {
    MapboxMapFragment_MembersInjector.injectMapProvider(instance, providesMapProvider.get());
    MapboxMapFragment_MembersInjector.injectStoragePathProvider(instance, storagePathProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private MainMenuActivity injectMainMenuActivity(MainMenuActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    MainMenuActivity_MembersInjector.injectViewModelFactory(instance, mainMenuViewModelFactory());
    MainMenuActivity_MembersInjector.injectCurrentProjectViewModelFactory(instance, currentProjectViewModelFactory());
    MainMenuActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private QRCodeTabsActivity injectQRCodeTabsActivity(QRCodeTabsActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    QRCodeTabsActivity_MembersInjector.injectQrCodeGenerator(instance, qRCodeGenerator());
    QRCodeTabsActivity_MembersInjector.injectActivityAvailability(instance, activityAvailability());
    QRCodeTabsActivity_MembersInjector.injectFileProvider(instance, fileProvider());
    QRCodeTabsActivity_MembersInjector.injectScheduler(instance, scheduler());
    QRCodeTabsActivity_MembersInjector.injectQrCodeDecoder(instance, AppDependencyModule_ProvidesQRCodeDecoderFactory.providesQRCodeDecoder(appDependencyModule));
    QRCodeTabsActivity_MembersInjector.injectSettingsImporter(instance, settingsImporter());
    QRCodeTabsActivity_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    QRCodeTabsActivity_MembersInjector.injectAppConfigurationGenerator(instance, appConfigurationGenerator());
    QRCodeTabsActivity_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private ShowQRCodeFragment injectShowQRCodeFragment(ShowQRCodeFragment instance) {
    ShowQRCodeFragment_MembersInjector.injectQrCodeGenerator(instance, qRCodeGenerator());
    ShowQRCodeFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    ShowQRCodeFragment_MembersInjector.injectScheduler(instance, scheduler());
    ShowQRCodeFragment_MembersInjector.injectAppConfigurationGenerator(instance, appConfigurationGenerator());
    return instance;
  }

  @CanIgnoreReturnValue
  private AutoSendTaskSpec injectAutoSendTaskSpec(AutoSendTaskSpec instance) {
    AutoSendTaskSpec_MembersInjector.injectConnectivityProvider(instance, AppDependencyModule_ProvidesConnectivityProviderFactory.providesConnectivityProvider(appDependencyModule));
    AutoSendTaskSpec_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    AutoSendTaskSpec_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    AutoSendTaskSpec_MembersInjector.injectInstanceAutoSender(instance, instanceAutoSender());
    return instance;
  }

  @CanIgnoreReturnValue
  private AdminPasswordDialogFragment injectAdminPasswordDialogFragment(
      AdminPasswordDialogFragment instance) {
    AdminPasswordDialogFragment_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    AdminPasswordDialogFragment_MembersInjector.injectAdminPasswordProvider(instance, adminPasswordProvider());
    AdminPasswordDialogFragment_MembersInjector.injectSoftKeyboardController(instance, AppDependencyModule_ProvideSoftKeyboardControllerFactory.provideSoftKeyboardController(appDependencyModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private SplashScreenActivity injectSplashScreenActivity(SplashScreenActivity instance) {
    SplashScreenActivity_MembersInjector.injectSplashScreenViewModelFactoryFactory(instance, splashScreenViewModelFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private FormHierarchyActivity injectFormHierarchyActivity(FormHierarchyActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    FormHierarchyActivity_MembersInjector.injectFormEntryViewModelFactory(instance, formEntryViewModelFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private FormManagementPreferencesFragment injectFormManagementPreferencesFragment(
      FormManagementPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectGeneralSettingsStore(instance, namedSettingsStore());
    BaseProjectPreferencesFragment_MembersInjector.injectAdminPasswordProvider(instance, adminPasswordProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    BaseProjectPreferencesFragment_MembersInjector.injectPreferenceVisibilityHandler(instance, preferenceVisibilityHandler());
    FormManagementPreferencesFragment_MembersInjector.injectFormUpdateScheduler(instance, formUpdateScheduler());
    FormManagementPreferencesFragment_MembersInjector.injectInstanceSubmitScheduler(instance, instanceSubmitScheduler());
    return instance;
  }

  @CanIgnoreReturnValue
  private IdentityPreferencesFragment injectIdentityPreferencesFragment(
      IdentityPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectGeneralSettingsStore(instance, namedSettingsStore());
    BaseProjectPreferencesFragment_MembersInjector.injectAdminPasswordProvider(instance, adminPasswordProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    BaseProjectPreferencesFragment_MembersInjector.injectPreferenceVisibilityHandler(instance, preferenceVisibilityHandler());
    IdentityPreferencesFragment_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    IdentityPreferencesFragment_MembersInjector.injectVersionInformation(instance, AppDependencyModule_ProvidesVersionInformationFactory.providesVersionInformation(appDependencyModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private UserInterfacePreferencesFragment injectUserInterfacePreferencesFragment(
      UserInterfacePreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectGeneralSettingsStore(instance, namedSettingsStore());
    BaseProjectPreferencesFragment_MembersInjector.injectAdminPasswordProvider(instance, adminPasswordProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    BaseProjectPreferencesFragment_MembersInjector.injectPreferenceVisibilityHandler(instance, preferenceVisibilityHandler());
    UserInterfacePreferencesFragment_MembersInjector.injectVersionInformation(instance, AppDependencyModule_ProvidesVersionInformationFactory.providesVersionInformation(appDependencyModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private SaveFormProgressDialogFragment injectSaveFormProgressDialogFragment(
      SaveFormProgressDialogFragment instance) {
    SaveFormProgressDialogFragment_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    SaveFormProgressDialogFragment_MembersInjector.injectScheduler(instance, scheduler());
    SaveFormProgressDialogFragment_MembersInjector.injectFormSaveViewModelFactoryFactory(instance, factoryFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private QuitFormDialogFragment injectQuitFormDialogFragment(QuitFormDialogFragment instance) {
    QuitFormDialogFragment_MembersInjector.injectAnalytics(instance, providesAnalyticsProvider.get());
    QuitFormDialogFragment_MembersInjector.injectScheduler(instance, scheduler());
    QuitFormDialogFragment_MembersInjector.injectFormSaveViewModelFactoryFactory(instance, factoryFactory());
    QuitFormDialogFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    QuitFormDialogFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private BarCodeScannerFragment injectBarCodeScannerFragment(BarCodeScannerFragment instance) {
    BarCodeScannerFragment_MembersInjector.injectCodeCaptureManagerFactory(instance, AppDependencyModule_ProvidesCodeCaptureManagerFactoryFactory.providesCodeCaptureManagerFactory(appDependencyModule));
    BarCodeScannerFragment_MembersInjector.injectBarcodeViewDecoder(instance, AppDependencyModule_ProvidesBarcodeViewDecoderFactory.providesBarcodeViewDecoder(appDependencyModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private QRCodeScannerFragment injectQRCodeScannerFragment(QRCodeScannerFragment instance) {
    BarCodeScannerFragment_MembersInjector.injectCodeCaptureManagerFactory(instance, AppDependencyModule_ProvidesCodeCaptureManagerFactoryFactory.providesCodeCaptureManagerFactory(appDependencyModule));
    BarCodeScannerFragment_MembersInjector.injectBarcodeViewDecoder(instance, AppDependencyModule_ProvidesBarcodeViewDecoderFactory.providesBarcodeViewDecoder(appDependencyModule));
    QRCodeScannerFragment_MembersInjector.injectSettingsImporter(instance, settingsImporter());
    QRCodeScannerFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    QRCodeScannerFragment_MembersInjector.injectStoragePathProvider(instance, storagePathProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private ProjectPreferencesActivity injectProjectPreferencesActivity(
      ProjectPreferencesActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    ProjectPreferencesActivity_MembersInjector.injectPropertyManager(instance, providesPropertyManagerProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ResetDialogPreferenceFragmentCompat injectResetDialogPreferenceFragmentCompat(
      ResetDialogPreferenceFragmentCompat instance) {
    ResetDialogPreferenceFragmentCompat_MembersInjector.injectProjectResetter(instance, projectResetter());
    return instance;
  }

  @CanIgnoreReturnValue
  private FillBlankFormActivity injectFillBlankFormActivity(FillBlankFormActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    FillBlankFormActivity_MembersInjector.injectNetworkStateProvider(instance, AppDependencyModule_ProvidesConnectivityProviderFactory.providesConnectivityProvider(appDependencyModule));
    FillBlankFormActivity_MembersInjector.injectBlankFormsListViewModelFactory(instance, blankFormsListViewModelFactory());
    FillBlankFormActivity_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private MapBoxInitializationFragment injectMapBoxInitializationFragment(
      MapBoxInitializationFragment instance) {
    MapBoxInitializationFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    MapBoxInitializationFragment_MembersInjector.injectConnectivityProvider(instance, AppDependencyModule_ProvidesConnectivityProviderFactory.providesConnectivityProvider(appDependencyModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private SyncFormsTaskSpec injectSyncFormsTaskSpec(SyncFormsTaskSpec instance) {
    SyncFormsTaskSpec_MembersInjector.injectFormsUpdater(instance, formsUpdater());
    return instance;
  }

  @CanIgnoreReturnValue
  private ExperimentalPreferencesFragment injectExperimentalPreferencesFragment(
      ExperimentalPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectGeneralSettingsStore(instance, namedSettingsStore());
    BaseProjectPreferencesFragment_MembersInjector.injectAdminPasswordProvider(instance, adminPasswordProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    BaseProjectPreferencesFragment_MembersInjector.injectPreferenceVisibilityHandler(instance, preferenceVisibilityHandler());
    return instance;
  }

  @CanIgnoreReturnValue
  private AutoUpdateTaskSpec injectAutoUpdateTaskSpec(AutoUpdateTaskSpec instance) {
    AutoUpdateTaskSpec_MembersInjector.injectFormsUpdater(instance, formsUpdater());
    return instance;
  }

  @CanIgnoreReturnValue
  private ServerAuthDialogFragment injectServerAuthDialogFragment(
      ServerAuthDialogFragment instance) {
    ServerAuthDialogFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private BasePreferencesFragment injectBasePreferencesFragment(BasePreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private BlankFormListFragment injectBlankFormListFragment(BlankFormListFragment instance) {
    AppListFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BlankFormListFragment_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    BlankFormListFragment_MembersInjector.injectInstancesRepositoryProvider(instance, instancesRepositoryProvider());
    BlankFormListFragment_MembersInjector.injectFastExternalItemsetsRepository(instance, AppDependencyModule_ProvidesItemsetsRepositoryFactory.providesItemsetsRepository(appDependencyModule));
    BlankFormListFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private InstanceUploaderActivity injectInstanceUploaderActivity(
      InstanceUploaderActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    InstanceUploaderActivity_MembersInjector.injectInstancesRepositoryProvider(instance, instancesRepositoryProvider());
    InstanceUploaderActivity_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private ProjectPreferencesFragment injectProjectPreferencesFragment(
      ProjectPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectGeneralSettingsStore(instance, namedSettingsStore());
    BaseProjectPreferencesFragment_MembersInjector.injectAdminPasswordProvider(instance, adminPasswordProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    BaseProjectPreferencesFragment_MembersInjector.injectPreferenceVisibilityHandler(instance, preferenceVisibilityHandler());
    return instance;
  }

  @CanIgnoreReturnValue
  private DeleteSavedFormActivity injectDeleteSavedFormActivity(DeleteSavedFormActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    DeleteSavedFormActivity_MembersInjector.injectViewModelFactory(instance, blankFormsListViewModelFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private SelectMinimalDialog injectSelectMinimalDialog(SelectMinimalDialog instance) {
    SelectMinimalDialog_MembersInjector.injectAudioHelperFactory(instance, audioHelperFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private AudioRecordingControllerFragment injectAudioRecordingControllerFragment(
      AudioRecordingControllerFragment instance) {
    AudioRecordingControllerFragment_MembersInjector.injectAudioRecorder(instance, audioRecorder());
    AudioRecordingControllerFragment_MembersInjector.injectFormEntryViewModelFactory(instance, formEntryViewModelFactory());
    AudioRecordingControllerFragment_MembersInjector.injectBackgroundAudioViewModelFactory(instance, backgroundAudioViewModelFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private SaveAnswerFileErrorDialogFragment injectSaveAnswerFileErrorDialogFragment(
      SaveAnswerFileErrorDialogFragment instance) {
    SaveAnswerFileErrorDialogFragment_MembersInjector.injectFormSaveViewModelFactoryFactory(instance, factoryFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private AudioRecordingErrorDialogFragment injectAudioRecordingErrorDialogFragment(
      AudioRecordingErrorDialogFragment instance) {
    AudioRecordingErrorDialogFragment_MembersInjector.injectAudioRecorder(instance, audioRecorder());
    return instance;
  }

  @CanIgnoreReturnValue
  private CollectAbstractActivity injectCollectAbstractActivity(CollectAbstractActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private InstanceChooserList injectInstanceChooserList(InstanceChooserList instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    InstanceChooserList_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private FormsProvider injectFormsProvider(FormsProvider instance) {
    FormsProvider_MembersInjector.injectClock(instance, AppDependencyModule_ProvidesClockFactory.providesClock(appDependencyModule));
    FormsProvider_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    FormsProvider_MembersInjector.injectInstancesRepositoryProvider(instance, instancesRepositoryProvider());
    FormsProvider_MembersInjector.injectFastExternalItemsetsRepository(instance, AppDependencyModule_ProvidesItemsetsRepositoryFactory.providesItemsetsRepository(appDependencyModule));
    FormsProvider_MembersInjector.injectStoragePathProvider(instance, storagePathProvider());
    FormsProvider_MembersInjector.injectProjectsRepository(instance, providesProjectsRepositoryProvider.get());
    FormsProvider_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private InstanceProvider injectInstanceProvider(InstanceProvider instance) {
    InstanceProvider_MembersInjector.injectInstancesRepositoryProvider(instance, instancesRepositoryProvider());
    InstanceProvider_MembersInjector.injectFormsRepositoryProvider(instance, formsRepositoryProvider());
    InstanceProvider_MembersInjector.injectStoragePathProvider(instance, storagePathProvider());
    InstanceProvider_MembersInjector.injectProjectsRepository(instance, providesProjectsRepositoryProvider.get());
    InstanceProvider_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private BackgroundAudioPermissionDialogFragment injectBackgroundAudioPermissionDialogFragment(
      BackgroundAudioPermissionDialogFragment instance) {
    BackgroundAudioPermissionDialogFragment_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    BackgroundAudioPermissionDialogFragment_MembersInjector.injectViewModelFactory(instance, backgroundAudioViewModelFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private AppListFragment injectAppListFragment(AppListFragment instance) {
    AppListFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ChangeAdminPasswordDialog injectChangeAdminPasswordDialog(
      ChangeAdminPasswordDialog instance) {
    ChangeAdminPasswordDialog_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    ChangeAdminPasswordDialog_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    ChangeAdminPasswordDialog_MembersInjector.injectSoftKeyboardController(instance, AppDependencyModule_ProvideSoftKeyboardControllerFactory.provideSoftKeyboardController(appDependencyModule));
    return instance;
  }

  @CanIgnoreReturnValue
  private MediaLoadingTask injectMediaLoadingTask(MediaLoadingTask instance) {
    MediaLoadingTask_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ThemeUtils injectThemeUtils(ThemeUtils instance) {
    ThemeUtils_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private BaseProjectPreferencesFragment injectBaseProjectPreferencesFragment(
      BaseProjectPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectGeneralSettingsStore(instance, namedSettingsStore());
    BaseProjectPreferencesFragment_MembersInjector.injectAdminPasswordProvider(instance, adminPasswordProvider());
    BaseProjectPreferencesFragment_MembersInjector.injectFactory(instance, projectPreferencesViewModelFactory());
    BaseProjectPreferencesFragment_MembersInjector.injectPreferenceVisibilityHandler(instance, preferenceVisibilityHandler());
    return instance;
  }

  @CanIgnoreReturnValue
  private BaseAdminPreferencesFragment injectBaseAdminPreferencesFragment(
      BaseAdminPreferencesFragment instance) {
    BasePreferencesFragment_MembersInjector.injectSettingsChangeHandler(instance, settingsChangeHandler());
    BasePreferencesFragment_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    BasePreferencesFragment_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    BaseAdminPreferencesFragment_MembersInjector.injectAdminSettingsStore(instance, namedSettingsStore2());
    return instance;
  }

  @CanIgnoreReturnValue
  private CaptionedListPreference injectCaptionedListPreference(CaptionedListPreference instance) {
    CaptionedListPreference_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private AndroidShortcutsActivity injectAndroidShortcutsActivity(
      AndroidShortcutsActivity instance) {
    AndroidShortcutsActivity_MembersInjector.injectBlankFormsListViewModelFactory(instance, blankFormsListViewModelFactory());
    AndroidShortcutsActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ProjectSettingsDialog injectProjectSettingsDialog(ProjectSettingsDialog instance) {
    ProjectSettingsDialog_MembersInjector.injectProjectsRepository(instance, providesProjectsRepositoryProvider.get());
    ProjectSettingsDialog_MembersInjector.injectCurrentProjectViewModelFactory(instance, currentProjectViewModelFactory());
    ProjectSettingsDialog_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private ManualProjectCreatorDialog injectManualProjectCreatorDialog(
      ManualProjectCreatorDialog instance) {
    ManualProjectCreatorDialog_MembersInjector.injectProjectCreator(instance, projectCreator());
    ManualProjectCreatorDialog_MembersInjector.injectAppConfigurationGenerator(instance, appConfigurationGenerator());
    ManualProjectCreatorDialog_MembersInjector.injectSoftKeyboardController(instance, AppDependencyModule_ProvideSoftKeyboardControllerFactory.provideSoftKeyboardController(appDependencyModule));
    ManualProjectCreatorDialog_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    ManualProjectCreatorDialog_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    ManualProjectCreatorDialog_MembersInjector.injectGoogleAccountsManager(instance, googleAccountsManager());
    ManualProjectCreatorDialog_MembersInjector.injectProjectsRepository(instance, providesProjectsRepositoryProvider.get());
    ManualProjectCreatorDialog_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    ManualProjectCreatorDialog_MembersInjector.injectActivityAvailability(instance, activityAvailability());
    return instance;
  }

  @CanIgnoreReturnValue
  private QrCodeProjectCreatorDialog injectQrCodeProjectCreatorDialog(
      QrCodeProjectCreatorDialog instance) {
    QrCodeProjectCreatorDialog_MembersInjector.injectCodeCaptureManagerFactory(instance, AppDependencyModule_ProvidesCodeCaptureManagerFactoryFactory.providesCodeCaptureManagerFactory(appDependencyModule));
    QrCodeProjectCreatorDialog_MembersInjector.injectBarcodeViewDecoder(instance, AppDependencyModule_ProvidesBarcodeViewDecoderFactory.providesBarcodeViewDecoder(appDependencyModule));
    QrCodeProjectCreatorDialog_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    QrCodeProjectCreatorDialog_MembersInjector.injectProjectCreator(instance, projectCreator());
    QrCodeProjectCreatorDialog_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    QrCodeProjectCreatorDialog_MembersInjector.injectProjectsRepository(instance, providesProjectsRepositoryProvider.get());
    QrCodeProjectCreatorDialog_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    QrCodeProjectCreatorDialog_MembersInjector.injectActivityAvailability(instance, activityAvailability());
    QrCodeProjectCreatorDialog_MembersInjector.injectQrCodeDecoder(instance, AppDependencyModule_ProvidesQRCodeDecoderFactory.providesQRCodeDecoder(appDependencyModule));
    QrCodeProjectCreatorDialog_MembersInjector.injectSettingsImporter(instance, settingsImporter());
    return instance;
  }

  @CanIgnoreReturnValue
  private FirstLaunchActivity injectFirstLaunchActivity(FirstLaunchActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, providesSettingsProvider.get());
    FirstLaunchActivity_MembersInjector.injectProjectImporter(instance, projectImporter());
    FirstLaunchActivity_MembersInjector.injectVersionInformation(instance, AppDependencyModule_ProvidesVersionInformationFactory.providesVersionInformation(appDependencyModule));
    FirstLaunchActivity_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    return instance;
  }

  @CanIgnoreReturnValue
  private InstanceUploader injectInstanceUploader(InstanceUploader instance) {
    InstanceUploader_MembersInjector.injectInstancesRepositoryProvider(instance, instancesRepositoryProvider());
    InstanceUploader_MembersInjector.injectInstancesAppState(instance, providesInstancesAppStateProvider.get());
    return instance;
  }

  @CanIgnoreReturnValue
  private FormUriActivity injectFormUriActivity(FormUriActivity instance) {
    FormUriActivity_MembersInjector.injectCurrentProjectProvider(instance, currentProjectProvider());
    FormUriActivity_MembersInjector.injectProjectsRepository(instance, providesProjectsRepositoryProvider.get());
    return instance;
  }

  private static final class Builder implements AppDependencyComponent.Builder {
    private Application application;

    private AppDependencyModule appDependencyModule;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public Builder appDependencyModule(AppDependencyModule testDependencyModule) {
      this.appDependencyModule = Preconditions.checkNotNull(testDependencyModule);
      return this;
    }

    @Override
    public AppDependencyComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      if (appDependencyModule == null) {
        this.appDependencyModule = new AppDependencyModule();
      }
      return new DaggerAppDependencyComponent(appDependencyModule, application);
    }
  }
}
