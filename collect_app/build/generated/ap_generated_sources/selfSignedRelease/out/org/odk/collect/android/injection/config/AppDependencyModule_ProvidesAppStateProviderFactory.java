// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.odk.collect.android.preferences.source.SettingsProvider;
import org.odk.collect.android.utilities.LaunchState;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDependencyModule_ProvidesAppStateProviderFactory implements Factory<LaunchState> {
  private final AppDependencyModule module;

  private final Provider<Context> contextProvider;

  private final Provider<SettingsProvider> settingsProvider;

  public AppDependencyModule_ProvidesAppStateProviderFactory(AppDependencyModule module,
      Provider<Context> contextProvider, Provider<SettingsProvider> settingsProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.settingsProvider = settingsProvider;
  }

  @Override
  public LaunchState get() {
    return providesAppStateProvider(module, contextProvider.get(), settingsProvider.get());
  }

  public static AppDependencyModule_ProvidesAppStateProviderFactory create(
      AppDependencyModule module, Provider<Context> contextProvider,
      Provider<SettingsProvider> settingsProvider) {
    return new AppDependencyModule_ProvidesAppStateProviderFactory(module, contextProvider, settingsProvider);
  }

  public static LaunchState providesAppStateProvider(AppDependencyModule instance, Context context,
      SettingsProvider settingsProvider) {
    return Preconditions.checkNotNullFromProvides(instance.providesAppStateProvider(context, settingsProvider));
  }
}
