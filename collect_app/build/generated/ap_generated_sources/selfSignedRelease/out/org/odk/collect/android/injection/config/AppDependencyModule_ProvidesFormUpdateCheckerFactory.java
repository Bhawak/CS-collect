// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.odk.collect.analytics.Analytics;
import org.odk.collect.android.formmanagement.FormSourceProvider;
import org.odk.collect.android.formmanagement.FormsUpdater;
import org.odk.collect.android.formmanagement.matchexactly.SyncStatusAppState;
import org.odk.collect.android.notifications.Notifier;
import org.odk.collect.android.preferences.source.SettingsProvider;
import org.odk.collect.android.storage.StoragePathProvider;
import org.odk.collect.android.utilities.ChangeLockProvider;
import org.odk.collect.android.utilities.FormsRepositoryProvider;
import org.odk.collect.android.utilities.InstancesRepositoryProvider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDependencyModule_ProvidesFormUpdateCheckerFactory implements Factory<FormsUpdater> {
  private final AppDependencyModule module;

  private final Provider<Context> contextProvider;

  private final Provider<Notifier> notifierProvider;

  private final Provider<Analytics> analyticsProvider;

  private final Provider<StoragePathProvider> storagePathProvider;

  private final Provider<SettingsProvider> settingsProvider;

  private final Provider<FormsRepositoryProvider> formsRepositoryProvider;

  private final Provider<FormSourceProvider> formSourceProvider;

  private final Provider<SyncStatusAppState> syncStatusAppStateProvider;

  private final Provider<InstancesRepositoryProvider> instancesRepositoryProvider;

  private final Provider<ChangeLockProvider> changeLockProvider;

  public AppDependencyModule_ProvidesFormUpdateCheckerFactory(AppDependencyModule module,
      Provider<Context> contextProvider, Provider<Notifier> notifierProvider,
      Provider<Analytics> analyticsProvider, Provider<StoragePathProvider> storagePathProvider,
      Provider<SettingsProvider> settingsProvider,
      Provider<FormsRepositoryProvider> formsRepositoryProvider,
      Provider<FormSourceProvider> formSourceProvider,
      Provider<SyncStatusAppState> syncStatusAppStateProvider,
      Provider<InstancesRepositoryProvider> instancesRepositoryProvider,
      Provider<ChangeLockProvider> changeLockProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.notifierProvider = notifierProvider;
    this.analyticsProvider = analyticsProvider;
    this.storagePathProvider = storagePathProvider;
    this.settingsProvider = settingsProvider;
    this.formsRepositoryProvider = formsRepositoryProvider;
    this.formSourceProvider = formSourceProvider;
    this.syncStatusAppStateProvider = syncStatusAppStateProvider;
    this.instancesRepositoryProvider = instancesRepositoryProvider;
    this.changeLockProvider = changeLockProvider;
  }

  @Override
  public FormsUpdater get() {
    return providesFormUpdateChecker(module, contextProvider.get(), notifierProvider.get(), analyticsProvider.get(), storagePathProvider.get(), settingsProvider.get(), formsRepositoryProvider.get(), formSourceProvider.get(), syncStatusAppStateProvider.get(), instancesRepositoryProvider.get(), changeLockProvider.get());
  }

  public static AppDependencyModule_ProvidesFormUpdateCheckerFactory create(
      AppDependencyModule module, Provider<Context> contextProvider,
      Provider<Notifier> notifierProvider, Provider<Analytics> analyticsProvider,
      Provider<StoragePathProvider> storagePathProvider,
      Provider<SettingsProvider> settingsProvider,
      Provider<FormsRepositoryProvider> formsRepositoryProvider,
      Provider<FormSourceProvider> formSourceProvider,
      Provider<SyncStatusAppState> syncStatusAppStateProvider,
      Provider<InstancesRepositoryProvider> instancesRepositoryProvider,
      Provider<ChangeLockProvider> changeLockProvider) {
    return new AppDependencyModule_ProvidesFormUpdateCheckerFactory(module, contextProvider, notifierProvider, analyticsProvider, storagePathProvider, settingsProvider, formsRepositoryProvider, formSourceProvider, syncStatusAppStateProvider, instancesRepositoryProvider, changeLockProvider);
  }

  public static FormsUpdater providesFormUpdateChecker(AppDependencyModule instance,
      Context context, Notifier notifier, Analytics analytics,
      StoragePathProvider storagePathProvider, SettingsProvider settingsProvider,
      FormsRepositoryProvider formsRepositoryProvider, FormSourceProvider formSourceProvider,
      SyncStatusAppState syncStatusAppState,
      InstancesRepositoryProvider instancesRepositoryProvider,
      ChangeLockProvider changeLockProvider) {
    return Preconditions.checkNotNullFromProvides(instance.providesFormUpdateChecker(context, notifier, analytics, storagePathProvider, settingsProvider, formsRepositoryProvider, formSourceProvider, syncStatusAppState, instancesRepositoryProvider, changeLockProvider));
  }
}
