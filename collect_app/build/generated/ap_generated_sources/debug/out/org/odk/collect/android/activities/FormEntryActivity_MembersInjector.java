// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.activities;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import org.odk.collect.analytics.Analytics;
import org.odk.collect.android.backgroundwork.InstanceSubmitScheduler;
import org.odk.collect.android.events.RxEventBus;
import org.odk.collect.android.formentry.BackgroundAudioViewModel;
import org.odk.collect.android.formentry.FormEntryViewModel;
import org.odk.collect.android.formentry.saving.FormSaveViewModel;
import org.odk.collect.android.logic.PropertyManager;
import org.odk.collect.android.permissions.PermissionsChecker;
import org.odk.collect.android.permissions.PermissionsProvider;
import org.odk.collect.android.preferences.source.SettingsProvider;
import org.odk.collect.android.projects.CurrentProjectProvider;
import org.odk.collect.android.storage.StoragePathProvider;
import org.odk.collect.android.utilities.ActivityAvailability;
import org.odk.collect.android.utilities.ExternalAppIntentProvider;
import org.odk.collect.android.utilities.FormsRepositoryProvider;
import org.odk.collect.android.utilities.SoftKeyboardController;
import org.odk.collect.async.Scheduler;
import org.odk.collect.audiorecorder.recording.AudioRecorder;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FormEntryActivity_MembersInjector implements MembersInjector<FormEntryActivity> {
  private final Provider<PermissionsProvider> permissionsProvider;

  private final Provider<SettingsProvider> settingsProvider;

  private final Provider<RxEventBus> eventBusProvider;

  private final Provider<Analytics> analyticsProvider;

  private final Provider<StoragePathProvider> storagePathProvider;

  private final Provider<FormsRepositoryProvider> formsRepositoryProvider;

  private final Provider<PropertyManager> propertyManagerProvider;

  private final Provider<InstanceSubmitScheduler> instanceSubmitSchedulerProvider;

  private final Provider<Scheduler> schedulerProvider;

  private final Provider<AudioRecorder> audioRecorderProvider;

  private final Provider<FormSaveViewModel.FactoryFactory> formSaveViewModelFactoryFactoryProvider;

  private final Provider<FormEntryViewModel.Factory> formEntryViewModelFactoryProvider;

  private final Provider<SoftKeyboardController> softKeyboardControllerProvider;

  private final Provider<PermissionsChecker> permissionsCheckerProvider;

  private final Provider<ActivityAvailability> activityAvailabilityProvider;

  private final Provider<ExternalAppIntentProvider> externalAppIntentProvider;

  private final Provider<BackgroundAudioViewModel.Factory> backgroundAudioViewModelFactoryProvider;

  private final Provider<CurrentProjectProvider> currentProjectProvider;

  public FormEntryActivity_MembersInjector(Provider<PermissionsProvider> permissionsProvider,
      Provider<SettingsProvider> settingsProvider, Provider<RxEventBus> eventBusProvider,
      Provider<Analytics> analyticsProvider, Provider<StoragePathProvider> storagePathProvider,
      Provider<FormsRepositoryProvider> formsRepositoryProvider,
      Provider<PropertyManager> propertyManagerProvider,
      Provider<InstanceSubmitScheduler> instanceSubmitSchedulerProvider,
      Provider<Scheduler> schedulerProvider, Provider<AudioRecorder> audioRecorderProvider,
      Provider<FormSaveViewModel.FactoryFactory> formSaveViewModelFactoryFactoryProvider,
      Provider<FormEntryViewModel.Factory> formEntryViewModelFactoryProvider,
      Provider<SoftKeyboardController> softKeyboardControllerProvider,
      Provider<PermissionsChecker> permissionsCheckerProvider,
      Provider<ActivityAvailability> activityAvailabilityProvider,
      Provider<ExternalAppIntentProvider> externalAppIntentProvider,
      Provider<BackgroundAudioViewModel.Factory> backgroundAudioViewModelFactoryProvider,
      Provider<CurrentProjectProvider> currentProjectProvider) {
    this.permissionsProvider = permissionsProvider;
    this.settingsProvider = settingsProvider;
    this.eventBusProvider = eventBusProvider;
    this.analyticsProvider = analyticsProvider;
    this.storagePathProvider = storagePathProvider;
    this.formsRepositoryProvider = formsRepositoryProvider;
    this.propertyManagerProvider = propertyManagerProvider;
    this.instanceSubmitSchedulerProvider = instanceSubmitSchedulerProvider;
    this.schedulerProvider = schedulerProvider;
    this.audioRecorderProvider = audioRecorderProvider;
    this.formSaveViewModelFactoryFactoryProvider = formSaveViewModelFactoryFactoryProvider;
    this.formEntryViewModelFactoryProvider = formEntryViewModelFactoryProvider;
    this.softKeyboardControllerProvider = softKeyboardControllerProvider;
    this.permissionsCheckerProvider = permissionsCheckerProvider;
    this.activityAvailabilityProvider = activityAvailabilityProvider;
    this.externalAppIntentProvider = externalAppIntentProvider;
    this.backgroundAudioViewModelFactoryProvider = backgroundAudioViewModelFactoryProvider;
    this.currentProjectProvider = currentProjectProvider;
  }

  public static MembersInjector<FormEntryActivity> create(
      Provider<PermissionsProvider> permissionsProvider,
      Provider<SettingsProvider> settingsProvider, Provider<RxEventBus> eventBusProvider,
      Provider<Analytics> analyticsProvider, Provider<StoragePathProvider> storagePathProvider,
      Provider<FormsRepositoryProvider> formsRepositoryProvider,
      Provider<PropertyManager> propertyManagerProvider,
      Provider<InstanceSubmitScheduler> instanceSubmitSchedulerProvider,
      Provider<Scheduler> schedulerProvider, Provider<AudioRecorder> audioRecorderProvider,
      Provider<FormSaveViewModel.FactoryFactory> formSaveViewModelFactoryFactoryProvider,
      Provider<FormEntryViewModel.Factory> formEntryViewModelFactoryProvider,
      Provider<SoftKeyboardController> softKeyboardControllerProvider,
      Provider<PermissionsChecker> permissionsCheckerProvider,
      Provider<ActivityAvailability> activityAvailabilityProvider,
      Provider<ExternalAppIntentProvider> externalAppIntentProvider,
      Provider<BackgroundAudioViewModel.Factory> backgroundAudioViewModelFactoryProvider,
      Provider<CurrentProjectProvider> currentProjectProvider) {
    return new FormEntryActivity_MembersInjector(permissionsProvider, settingsProvider, eventBusProvider, analyticsProvider, storagePathProvider, formsRepositoryProvider, propertyManagerProvider, instanceSubmitSchedulerProvider, schedulerProvider, audioRecorderProvider, formSaveViewModelFactoryFactoryProvider, formEntryViewModelFactoryProvider, softKeyboardControllerProvider, permissionsCheckerProvider, activityAvailabilityProvider, externalAppIntentProvider, backgroundAudioViewModelFactoryProvider, currentProjectProvider);
  }

  @Override
  public void injectMembers(FormEntryActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider.get());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, settingsProvider.get());
    injectEventBus(instance, eventBusProvider.get());
    injectAnalytics(instance, analyticsProvider.get());
    injectStoragePathProvider(instance, storagePathProvider.get());
    injectFormsRepositoryProvider(instance, formsRepositoryProvider.get());
    injectPropertyManager(instance, propertyManagerProvider.get());
    injectInstanceSubmitScheduler(instance, instanceSubmitSchedulerProvider.get());
    injectScheduler(instance, schedulerProvider.get());
    injectAudioRecorder(instance, audioRecorderProvider.get());
    injectFormSaveViewModelFactoryFactory(instance, formSaveViewModelFactoryFactoryProvider.get());
    injectFormEntryViewModelFactory(instance, formEntryViewModelFactoryProvider.get());
    injectSoftKeyboardController(instance, softKeyboardControllerProvider.get());
    injectPermissionsChecker(instance, permissionsCheckerProvider.get());
    injectActivityAvailability(instance, activityAvailabilityProvider.get());
    injectExternalAppIntentProvider(instance, externalAppIntentProvider.get());
    injectBackgroundAudioViewModelFactory(instance, backgroundAudioViewModelFactoryProvider.get());
    injectCurrentProjectProvider(instance, currentProjectProvider.get());
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.eventBus")
  public static void injectEventBus(FormEntryActivity instance, RxEventBus eventBus) {
    instance.eventBus = eventBus;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.analytics")
  public static void injectAnalytics(FormEntryActivity instance, Analytics analytics) {
    instance.analytics = analytics;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.storagePathProvider")
  public static void injectStoragePathProvider(FormEntryActivity instance,
      StoragePathProvider storagePathProvider) {
    instance.storagePathProvider = storagePathProvider;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.formsRepositoryProvider")
  public static void injectFormsRepositoryProvider(FormEntryActivity instance,
      FormsRepositoryProvider formsRepositoryProvider) {
    instance.formsRepositoryProvider = formsRepositoryProvider;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.propertyManager")
  public static void injectPropertyManager(FormEntryActivity instance,
      PropertyManager propertyManager) {
    instance.propertyManager = propertyManager;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.instanceSubmitScheduler")
  public static void injectInstanceSubmitScheduler(FormEntryActivity instance,
      InstanceSubmitScheduler instanceSubmitScheduler) {
    instance.instanceSubmitScheduler = instanceSubmitScheduler;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.scheduler")
  public static void injectScheduler(FormEntryActivity instance, Scheduler scheduler) {
    instance.scheduler = scheduler;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.audioRecorder")
  public static void injectAudioRecorder(FormEntryActivity instance, AudioRecorder audioRecorder) {
    instance.audioRecorder = audioRecorder;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.formSaveViewModelFactoryFactory")
  public static void injectFormSaveViewModelFactoryFactory(FormEntryActivity instance,
      FormSaveViewModel.FactoryFactory formSaveViewModelFactoryFactory) {
    instance.formSaveViewModelFactoryFactory = formSaveViewModelFactoryFactory;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.formEntryViewModelFactory")
  public static void injectFormEntryViewModelFactory(FormEntryActivity instance,
      FormEntryViewModel.Factory formEntryViewModelFactory) {
    instance.formEntryViewModelFactory = formEntryViewModelFactory;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.softKeyboardController")
  public static void injectSoftKeyboardController(FormEntryActivity instance,
      SoftKeyboardController softKeyboardController) {
    instance.softKeyboardController = softKeyboardController;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.permissionsChecker")
  public static void injectPermissionsChecker(FormEntryActivity instance,
      PermissionsChecker permissionsChecker) {
    instance.permissionsChecker = permissionsChecker;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.activityAvailability")
  public static void injectActivityAvailability(FormEntryActivity instance,
      ActivityAvailability activityAvailability) {
    instance.activityAvailability = activityAvailability;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.externalAppIntentProvider")
  public static void injectExternalAppIntentProvider(FormEntryActivity instance,
      ExternalAppIntentProvider externalAppIntentProvider) {
    instance.externalAppIntentProvider = externalAppIntentProvider;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.backgroundAudioViewModelFactory")
  public static void injectBackgroundAudioViewModelFactory(FormEntryActivity instance,
      BackgroundAudioViewModel.Factory backgroundAudioViewModelFactory) {
    instance.backgroundAudioViewModelFactory = backgroundAudioViewModelFactory;
  }

  @InjectedFieldSignature("org.odk.collect.android.activities.FormEntryActivity.currentProjectProvider")
  public static void injectCurrentProjectProvider(FormEntryActivity instance,
      CurrentProjectProvider currentProjectProvider) {
    instance.currentProjectProvider = currentProjectProvider;
  }
}
