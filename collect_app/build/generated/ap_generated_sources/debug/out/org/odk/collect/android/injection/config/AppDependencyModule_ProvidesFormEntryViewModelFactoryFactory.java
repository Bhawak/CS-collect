// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.odk.collect.analytics.Analytics;
import org.odk.collect.android.formentry.FormEntryViewModel;
import org.odk.collect.utilities.Clock;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDependencyModule_ProvidesFormEntryViewModelFactoryFactory implements Factory<FormEntryViewModel.Factory> {
  private final AppDependencyModule module;

  private final Provider<Clock> clockProvider;

  private final Provider<Analytics> analyticsProvider;

  public AppDependencyModule_ProvidesFormEntryViewModelFactoryFactory(AppDependencyModule module,
      Provider<Clock> clockProvider, Provider<Analytics> analyticsProvider) {
    this.module = module;
    this.clockProvider = clockProvider;
    this.analyticsProvider = analyticsProvider;
  }

  @Override
  public FormEntryViewModel.Factory get() {
    return providesFormEntryViewModelFactory(module, clockProvider.get(), analyticsProvider.get());
  }

  public static AppDependencyModule_ProvidesFormEntryViewModelFactoryFactory create(
      AppDependencyModule module, Provider<Clock> clockProvider,
      Provider<Analytics> analyticsProvider) {
    return new AppDependencyModule_ProvidesFormEntryViewModelFactoryFactory(module, clockProvider, analyticsProvider);
  }

  public static FormEntryViewModel.Factory providesFormEntryViewModelFactory(
      AppDependencyModule instance, Clock clock, Analytics analytics) {
    return Preconditions.checkNotNullFromProvides(instance.providesFormEntryViewModelFactory(clock, analytics));
  }
}
