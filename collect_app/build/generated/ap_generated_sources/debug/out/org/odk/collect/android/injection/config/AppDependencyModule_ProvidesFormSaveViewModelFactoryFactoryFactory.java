// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.odk.collect.analytics.Analytics;
import org.odk.collect.android.formentry.saving.FormSaveViewModel;
import org.odk.collect.android.projects.CurrentProjectProvider;
import org.odk.collect.async.Scheduler;
import org.odk.collect.audiorecorder.recording.AudioRecorder;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDependencyModule_ProvidesFormSaveViewModelFactoryFactoryFactory implements Factory<FormSaveViewModel.FactoryFactory> {
  private final AppDependencyModule module;

  private final Provider<Analytics> analyticsProvider;

  private final Provider<Scheduler> schedulerProvider;

  private final Provider<AudioRecorder> audioRecorderProvider;

  private final Provider<CurrentProjectProvider> currentProjectProvider;

  public AppDependencyModule_ProvidesFormSaveViewModelFactoryFactoryFactory(
      AppDependencyModule module, Provider<Analytics> analyticsProvider,
      Provider<Scheduler> schedulerProvider, Provider<AudioRecorder> audioRecorderProvider,
      Provider<CurrentProjectProvider> currentProjectProvider) {
    this.module = module;
    this.analyticsProvider = analyticsProvider;
    this.schedulerProvider = schedulerProvider;
    this.audioRecorderProvider = audioRecorderProvider;
    this.currentProjectProvider = currentProjectProvider;
  }

  @Override
  public FormSaveViewModel.FactoryFactory get() {
    return providesFormSaveViewModelFactoryFactory(module, analyticsProvider.get(), schedulerProvider.get(), audioRecorderProvider.get(), currentProjectProvider.get());
  }

  public static AppDependencyModule_ProvidesFormSaveViewModelFactoryFactoryFactory create(
      AppDependencyModule module, Provider<Analytics> analyticsProvider,
      Provider<Scheduler> schedulerProvider, Provider<AudioRecorder> audioRecorderProvider,
      Provider<CurrentProjectProvider> currentProjectProvider) {
    return new AppDependencyModule_ProvidesFormSaveViewModelFactoryFactoryFactory(module, analyticsProvider, schedulerProvider, audioRecorderProvider, currentProjectProvider);
  }

  public static FormSaveViewModel.FactoryFactory providesFormSaveViewModelFactoryFactory(
      AppDependencyModule instance, Analytics analytics, Scheduler scheduler,
      AudioRecorder audioRecorder, CurrentProjectProvider currentProjectProvider) {
    return Preconditions.checkNotNullFromProvides(instance.providesFormSaveViewModelFactoryFactory(analytics, scheduler, audioRecorder, currentProjectProvider));
  }
}
