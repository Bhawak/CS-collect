// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.configure.qr;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;
import org.odk.collect.analytics.Analytics;
import org.odk.collect.android.activities.CollectAbstractActivity_MembersInjector;
import org.odk.collect.android.configure.SettingsImporter;
import org.odk.collect.android.permissions.PermissionsProvider;
import org.odk.collect.android.preferences.source.SettingsProvider;
import org.odk.collect.android.projects.CurrentProjectProvider;
import org.odk.collect.android.utilities.ActivityAvailability;
import org.odk.collect.android.utilities.FileProvider;
import org.odk.collect.async.Scheduler;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class QRCodeTabsActivity_MembersInjector implements MembersInjector<QRCodeTabsActivity> {
  private final Provider<PermissionsProvider> permissionsProvider;

  private final Provider<SettingsProvider> settingsProvider;

  private final Provider<QRCodeGenerator> qrCodeGeneratorProvider;

  private final Provider<ActivityAvailability> activityAvailabilityProvider;

  private final Provider<FileProvider> fileProvider;

  private final Provider<Scheduler> schedulerProvider;

  private final Provider<QRCodeDecoder> qrCodeDecoderProvider;

  private final Provider<SettingsImporter> settingsImporterProvider;

  private final Provider<Analytics> analyticsProvider;

  private final Provider<AppConfigurationGenerator> appConfigurationGeneratorProvider;

  private final Provider<CurrentProjectProvider> currentProjectProvider;

  public QRCodeTabsActivity_MembersInjector(Provider<PermissionsProvider> permissionsProvider,
      Provider<SettingsProvider> settingsProvider,
      Provider<QRCodeGenerator> qrCodeGeneratorProvider,
      Provider<ActivityAvailability> activityAvailabilityProvider,
      Provider<FileProvider> fileProvider, Provider<Scheduler> schedulerProvider,
      Provider<QRCodeDecoder> qrCodeDecoderProvider,
      Provider<SettingsImporter> settingsImporterProvider, Provider<Analytics> analyticsProvider,
      Provider<AppConfigurationGenerator> appConfigurationGeneratorProvider,
      Provider<CurrentProjectProvider> currentProjectProvider) {
    this.permissionsProvider = permissionsProvider;
    this.settingsProvider = settingsProvider;
    this.qrCodeGeneratorProvider = qrCodeGeneratorProvider;
    this.activityAvailabilityProvider = activityAvailabilityProvider;
    this.fileProvider = fileProvider;
    this.schedulerProvider = schedulerProvider;
    this.qrCodeDecoderProvider = qrCodeDecoderProvider;
    this.settingsImporterProvider = settingsImporterProvider;
    this.analyticsProvider = analyticsProvider;
    this.appConfigurationGeneratorProvider = appConfigurationGeneratorProvider;
    this.currentProjectProvider = currentProjectProvider;
  }

  public static MembersInjector<QRCodeTabsActivity> create(
      Provider<PermissionsProvider> permissionsProvider,
      Provider<SettingsProvider> settingsProvider,
      Provider<QRCodeGenerator> qrCodeGeneratorProvider,
      Provider<ActivityAvailability> activityAvailabilityProvider,
      Provider<FileProvider> fileProvider, Provider<Scheduler> schedulerProvider,
      Provider<QRCodeDecoder> qrCodeDecoderProvider,
      Provider<SettingsImporter> settingsImporterProvider, Provider<Analytics> analyticsProvider,
      Provider<AppConfigurationGenerator> appConfigurationGeneratorProvider,
      Provider<CurrentProjectProvider> currentProjectProvider) {
    return new QRCodeTabsActivity_MembersInjector(permissionsProvider, settingsProvider, qrCodeGeneratorProvider, activityAvailabilityProvider, fileProvider, schedulerProvider, qrCodeDecoderProvider, settingsImporterProvider, analyticsProvider, appConfigurationGeneratorProvider, currentProjectProvider);
  }

  @Override
  public void injectMembers(QRCodeTabsActivity instance) {
    CollectAbstractActivity_MembersInjector.injectPermissionsProvider(instance, permissionsProvider.get());
    CollectAbstractActivity_MembersInjector.injectSettingsProvider(instance, settingsProvider.get());
    injectQrCodeGenerator(instance, qrCodeGeneratorProvider.get());
    injectActivityAvailability(instance, activityAvailabilityProvider.get());
    injectFileProvider(instance, fileProvider.get());
    injectScheduler(instance, schedulerProvider.get());
    injectQrCodeDecoder(instance, qrCodeDecoderProvider.get());
    injectSettingsImporter(instance, settingsImporterProvider.get());
    injectAnalytics(instance, analyticsProvider.get());
    injectAppConfigurationGenerator(instance, appConfigurationGeneratorProvider.get());
    injectCurrentProjectProvider(instance, currentProjectProvider.get());
  }

  @InjectedFieldSignature("org.odk.collect.android.configure.qr.QRCodeTabsActivity.qrCodeGenerator")
  public static void injectQrCodeGenerator(QRCodeTabsActivity instance,
      QRCodeGenerator qrCodeGenerator) {
    instance.qrCodeGenerator = qrCodeGenerator;
  }

  @InjectedFieldSignature("org.odk.collect.android.configure.qr.QRCodeTabsActivity.activityAvailability")
  public static void injectActivityAvailability(QRCodeTabsActivity instance,
      ActivityAvailability activityAvailability) {
    instance.activityAvailability = activityAvailability;
  }

  @InjectedFieldSignature("org.odk.collect.android.configure.qr.QRCodeTabsActivity.fileProvider")
  public static void injectFileProvider(QRCodeTabsActivity instance, FileProvider fileProvider) {
    instance.fileProvider = fileProvider;
  }

  @InjectedFieldSignature("org.odk.collect.android.configure.qr.QRCodeTabsActivity.scheduler")
  public static void injectScheduler(QRCodeTabsActivity instance, Scheduler scheduler) {
    instance.scheduler = scheduler;
  }

  @InjectedFieldSignature("org.odk.collect.android.configure.qr.QRCodeTabsActivity.qrCodeDecoder")
  public static void injectQrCodeDecoder(QRCodeTabsActivity instance, QRCodeDecoder qrCodeDecoder) {
    instance.qrCodeDecoder = qrCodeDecoder;
  }

  @InjectedFieldSignature("org.odk.collect.android.configure.qr.QRCodeTabsActivity.settingsImporter")
  public static void injectSettingsImporter(QRCodeTabsActivity instance,
      SettingsImporter settingsImporter) {
    instance.settingsImporter = settingsImporter;
  }

  @InjectedFieldSignature("org.odk.collect.android.configure.qr.QRCodeTabsActivity.analytics")
  public static void injectAnalytics(QRCodeTabsActivity instance, Analytics analytics) {
    instance.analytics = analytics;
  }

  @InjectedFieldSignature("org.odk.collect.android.configure.qr.QRCodeTabsActivity.appConfigurationGenerator")
  public static void injectAppConfigurationGenerator(QRCodeTabsActivity instance,
      AppConfigurationGenerator appConfigurationGenerator) {
    instance.appConfigurationGenerator = appConfigurationGenerator;
  }

  @InjectedFieldSignature("org.odk.collect.android.configure.qr.QRCodeTabsActivity.currentProjectProvider")
  public static void injectCurrentProjectProvider(QRCodeTabsActivity instance,
      CurrentProjectProvider currentProjectProvider) {
    instance.currentProjectProvider = currentProjectProvider;
  }
}
