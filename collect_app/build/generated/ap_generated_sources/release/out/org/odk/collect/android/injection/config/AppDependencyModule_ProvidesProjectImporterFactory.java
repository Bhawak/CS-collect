// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.odk.collect.android.projects.ProjectImporter;
import org.odk.collect.android.storage.StoragePathProvider;
import org.odk.collect.projects.ProjectsRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDependencyModule_ProvidesProjectImporterFactory implements Factory<ProjectImporter> {
  private final AppDependencyModule module;

  private final Provider<ProjectsRepository> projectsRepositoryProvider;

  private final Provider<StoragePathProvider> storagePathProvider;

  public AppDependencyModule_ProvidesProjectImporterFactory(AppDependencyModule module,
      Provider<ProjectsRepository> projectsRepositoryProvider,
      Provider<StoragePathProvider> storagePathProvider) {
    this.module = module;
    this.projectsRepositoryProvider = projectsRepositoryProvider;
    this.storagePathProvider = storagePathProvider;
  }

  @Override
  public ProjectImporter get() {
    return providesProjectImporter(module, projectsRepositoryProvider.get(), storagePathProvider.get());
  }

  public static AppDependencyModule_ProvidesProjectImporterFactory create(
      AppDependencyModule module, Provider<ProjectsRepository> projectsRepositoryProvider,
      Provider<StoragePathProvider> storagePathProvider) {
    return new AppDependencyModule_ProvidesProjectImporterFactory(module, projectsRepositoryProvider, storagePathProvider);
  }

  public static ProjectImporter providesProjectImporter(AppDependencyModule instance,
      ProjectsRepository projectsRepository, StoragePathProvider storagePathProvider) {
    return Preconditions.checkNotNullFromProvides(instance.providesProjectImporter(projectsRepository, storagePathProvider));
  }
}
