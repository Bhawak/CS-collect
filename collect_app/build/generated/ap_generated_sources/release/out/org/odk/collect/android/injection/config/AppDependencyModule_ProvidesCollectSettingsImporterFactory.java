// Generated by Dagger (https://dagger.dev).
package org.odk.collect.android.injection.config;

import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import org.odk.collect.android.application.initialization.SettingsMigrator;
import org.odk.collect.android.configure.SettingsChangeHandler;
import org.odk.collect.android.configure.SettingsImporter;
import org.odk.collect.android.configure.SettingsValidator;
import org.odk.collect.android.preferences.source.SettingsProvider;
import org.odk.collect.projects.ProjectsRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDependencyModule_ProvidesCollectSettingsImporterFactory implements Factory<SettingsImporter> {
  private final AppDependencyModule module;

  private final Provider<SettingsProvider> settingsProvider;

  private final Provider<SettingsMigrator> preferenceMigratorProvider;

  private final Provider<SettingsValidator> settingsValidatorProvider;

  private final Provider<SettingsChangeHandler> settingsChangeHandlerProvider;

  private final Provider<ProjectsRepository> projectsRepositoryProvider;

  private final Provider<Context> contextProvider;

  public AppDependencyModule_ProvidesCollectSettingsImporterFactory(AppDependencyModule module,
      Provider<SettingsProvider> settingsProvider,
      Provider<SettingsMigrator> preferenceMigratorProvider,
      Provider<SettingsValidator> settingsValidatorProvider,
      Provider<SettingsChangeHandler> settingsChangeHandlerProvider,
      Provider<ProjectsRepository> projectsRepositoryProvider, Provider<Context> contextProvider) {
    this.module = module;
    this.settingsProvider = settingsProvider;
    this.preferenceMigratorProvider = preferenceMigratorProvider;
    this.settingsValidatorProvider = settingsValidatorProvider;
    this.settingsChangeHandlerProvider = settingsChangeHandlerProvider;
    this.projectsRepositoryProvider = projectsRepositoryProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public SettingsImporter get() {
    return providesCollectSettingsImporter(module, settingsProvider.get(), preferenceMigratorProvider.get(), settingsValidatorProvider.get(), settingsChangeHandlerProvider.get(), projectsRepositoryProvider.get(), contextProvider.get());
  }

  public static AppDependencyModule_ProvidesCollectSettingsImporterFactory create(
      AppDependencyModule module, Provider<SettingsProvider> settingsProvider,
      Provider<SettingsMigrator> preferenceMigratorProvider,
      Provider<SettingsValidator> settingsValidatorProvider,
      Provider<SettingsChangeHandler> settingsChangeHandlerProvider,
      Provider<ProjectsRepository> projectsRepositoryProvider, Provider<Context> contextProvider) {
    return new AppDependencyModule_ProvidesCollectSettingsImporterFactory(module, settingsProvider, preferenceMigratorProvider, settingsValidatorProvider, settingsChangeHandlerProvider, projectsRepositoryProvider, contextProvider);
  }

  public static SettingsImporter providesCollectSettingsImporter(AppDependencyModule instance,
      SettingsProvider settingsProvider, SettingsMigrator preferenceMigrator,
      SettingsValidator settingsValidator, SettingsChangeHandler settingsChangeHandler,
      ProjectsRepository projectsRepository, Context context) {
    return Preconditions.checkNotNullFromProvides(instance.providesCollectSettingsImporter(settingsProvider, preferenceMigrator, settingsValidator, settingsChangeHandler, projectsRepository, context));
  }
}
